import stampit from 'stampit';
import { toValue } from '@swagger-api/apidom-core';
import { isReferenceLikeElement, MapVisitor, FallbackVisitor } from '@swagger-api/apidom-ns-openapi-3-0';
import WebhooksElement from "../../../elements/nces/Webhooks.mjs";
import { isPathItemElement, isReferenceElement } from "../../../predicates.mjs";
const WebhooksVisitor = stampit(MapVisitor, FallbackVisitor, {
  props: {
    specPath: element => {
      return isReferenceLikeElement(element) ? ['document', 'objects', 'Reference'] : ['document', 'objects', 'PathItem'];
    }
  },
  init() {
    this.element = new WebhooksElement();
  },
  methods: {
    ObjectElement(objectElement) {
      // @ts-ignore
      const result = MapVisitor.compose.methods.ObjectElement.call(this, objectElement);

      // decorate every ReferenceElement with metadata about their referencing type
      this.element.filter(isReferenceElement).forEach(referenceElement => {
        referenceElement.setMetaProperty('referenced-element', 'pathItem');
      });

      // decorate every PathItemElement with Webhook name metadata
      this.element.filter(isPathItemElement).forEach((pathItemElement, key) => {
        pathItemElement.setMetaProperty('webhook-name', toValue(key));
      });
      return result;
    }
  }
});
export default WebhooksVisitor;