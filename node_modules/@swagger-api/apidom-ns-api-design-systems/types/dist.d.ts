/// <reference types="@swagger-api/apidom-core/types/minim" />
import * as _swagger_api_apidom_core from '@swagger-api/apidom-core';
import { MediaTypes, NamespacePluginOptions, ObjectElement, Meta, Attributes, StringElement, ArrayElement, AnnotationElement, Element } from '@swagger-api/apidom-core';
export { isArrayElement, isBooleanElement, isElement, isLinkElement, isMemberElement, isNullElement, isNumberElement, isObjectElement, isRefElement, isStringElement } from '@swagger-api/apidom-core';
import * as minim from 'minim';
import { OperationElement, ParameterElement, RequestBodyElement, ResponseElement, OpenApi3_1Element } from '@swagger-api/apidom-ns-openapi-3-1';

type Format = 'generic' | 'json' | 'yaml';
declare class ApiDesignSystemsMediaTypes extends MediaTypes<string> {
    filterByFormat(format?: Format): string[];
    findBy(version?: string, format?: Format): string;
    latest(format?: Format): string;
}
declare const mediaTypes: ApiDesignSystemsMediaTypes;

declare const apiDesignSystems: {
    namespace: (options: NamespacePluginOptions) => minim.Namespace;
};

declare const plugin$1: () => () => {
    visitor: {
        OperationElement: {
            enter(element: OperationElement, ...rest: any): void;
            leave(element: OperationElement): void;
        };
        ParameterElement(element: ParameterElement): void;
        RequestBodyElement(element: RequestBodyElement): void;
        ResponseElement: {
            enter(element: ResponseElement): void;
            leave(element: ResponseElement): void;
        };
    };
};

declare const plugin: () => () => {
    visitor: {
        OperationElement(element: OperationElement, ...rest: any): void;
        ParameterElement(element: ParameterElement): void;
        RequestBodyElement(element: RequestBodyElement): void;
        ResponseElement(element: ResponseElement): void;
    };
};

declare class Info extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
}

declare class Main extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get version(): StringElement | undefined;
    set version(version: StringElement | undefined);
    get info(): Info | undefined;
    set info(info: Info | undefined);
    get principles(): ArrayElement | undefined;
    set principles(principles: ArrayElement | undefined);
    get standards(): ArrayElement | undefined;
    set standards(standards: ArrayElement | undefined);
    get scenarios(): ArrayElement | undefined;
    set scenarios(scenarios: ArrayElement | undefined);
}

declare const validate: (mainElement: Main, openApiElement: OpenApi3_1Element) => AnnotationElement[];

declare class RequirementLevel extends StringElement {
    constructor(content?: string, meta?: Meta, attributes?: Attributes);
}

declare class Principle extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get iri(): StringElement | undefined;
    set iri(iri: StringElement | undefined);
    get level(): RequirementLevel | undefined;
    set level(level: RequirementLevel | undefined);
}

declare class StandardIdentifier extends ArrayElement {
    constructor(content?: string[], meta?: Meta, attributes?: Attributes);
}

declare class Requirement extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get subject(): StandardIdentifier;
    set subject(subject: StandardIdentifier);
    get level(): RequirementLevel;
    set level(level: RequirementLevel);
    get values(): ArrayElement | undefined;
    set values(values: ArrayElement | undefined);
    get follows(): StringElement | undefined;
    set follows(follows: StringElement | undefined);
}

declare class Scenario extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get when(): StandardIdentifier;
    set when(when: StandardIdentifier);
    get then(): ArrayElement | undefined;
    set then(then: ArrayElement | undefined);
}

declare class Standard extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get iri(): StringElement | undefined;
    set iri(iri: StringElement | undefined);
    get level(): RequirementLevel | undefined;
    set level(level: RequirementLevel | undefined);
}

declare const isMainElement: _swagger_api_apidom_core.ElementPredicate<Main>;
declare const isInfoElement: _swagger_api_apidom_core.ElementPredicate<Info>;
declare const isPrincipleElement: _swagger_api_apidom_core.ElementPredicate<Principle>;
declare const isRequirementElement: _swagger_api_apidom_core.ElementPredicate<Requirement>;
declare const isRequirementLevelElement: _swagger_api_apidom_core.ElementPredicate<RequirementLevel>;
declare const isScenarioElement: _swagger_api_apidom_core.ElementPredicate<Scenario>;
declare const isStandardElement: _swagger_api_apidom_core.ElementPredicate<Standard>;
declare const isStandardIdentifierElement: _swagger_api_apidom_core.ElementPredicate<StandardIdentifier>;

declare const getNodeType: <T extends Element>(element: T) => string | undefined;
declare const keyMap: {
    ObjectElement: string[];
    ArrayElement: string[];
    MemberElement: string[];
    StringElement: never[];
    BooleanElement: never[];
    NumberElement: never[];
    NullElement: never[];
    RefElement: never[];
    LinkElement: never[];
    Annotation: never[];
    Comment: never[];
    ParseResultElement: string[];
    SourceMap: string[];
    /**
     * API Design Systems 2021-05-07 specification elements.
     */
    MainElement: string[];
    InfoElement: string[];
    PrincipleElement: string[];
    StandardElement: string[];
    ScenarioElement: string[];
    RequirementElement: string[];
    StandardIdentifierElement: string[];
    RequirementLevelElement: never[];
};

export { ApiDesignSystemsMediaTypes, Info as InfoElement, Main as MainElement, Principle as PrincipleElement, Requirement as RequirementElement, RequirementLevel as RequirementLevelElement, Scenario as ScenarioElement, Standard as StandardElement, StandardIdentifier as StandardIdentifierElement, apiDesignSystems as default, getNodeType, isInfoElement, isMainElement, isPrincipleElement, isRequirementElement, isRequirementLevelElement, isScenarioElement, isStandardElement, isStandardIdentifierElement, keyMap, mediaTypes, plugin as refractPluginOpenApi3_1StandardIdentifierAccessors, plugin$1 as refractPluginOpenApi3_1StandardIdentifierSelectors, validate as validateOpenAPI3_1 };
