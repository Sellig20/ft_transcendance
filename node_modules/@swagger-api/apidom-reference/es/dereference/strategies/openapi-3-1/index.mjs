import stampit from 'stampit';
import { defaultTo, propEq } from 'ramda';
import { createNamespace, visit } from '@swagger-api/apidom-core';
import openApi3_1Namespace, { getNodeType, isOpenApi3_1Element, keyMap, mediaTypes } from '@swagger-api/apidom-ns-openapi-3-1';
import DereferenceStrategy from "../DereferenceStrategy.mjs";
import Reference from "../../../Reference.mjs";
import ReferenceSet from "../../../ReferenceSet.mjs";
import OpenApi3_1DereferenceVisitor from "./visitor.mjs"; // @ts-ignore
const visitAsync = visit[Symbol.for('nodejs.util.promisify.custom')];

// eslint-disable-next-line @typescript-eslint/naming-convention
const OpenApi3_1DereferenceStrategy = stampit(DereferenceStrategy, {
  init() {
    this.name = 'openapi-3-1';
  },
  methods: {
    canDereference(file) {
      var _file$parseResult;
      // assert by media type
      if (file.mediaType !== 'text/plain') {
        return mediaTypes.includes(file.mediaType);
      }

      // assert by inspecting ApiDOM
      return isOpenApi3_1Element((_file$parseResult = file.parseResult) === null || _file$parseResult === void 0 ? void 0 : _file$parseResult.result);
    },
    async dereference(file, options) {
      const namespace = createNamespace(openApi3_1Namespace);
      const refSet = defaultTo(ReferenceSet(), options.dereference.refSet);
      let reference;
      if (!refSet.has(file.uri)) {
        reference = Reference({
          uri: file.uri,
          value: file.parseResult
        });
        refSet.add(reference);
      } else {
        // pre-computed refSet was provided as configuration option
        reference = refSet.find(propEq(file.uri, 'uri'));
      }
      const visitor = OpenApi3_1DereferenceVisitor({
        reference,
        namespace,
        options
      });
      const dereferencedElement = await visitAsync(refSet.rootRef.value, visitor, {
        keyMap,
        nodeTypeGetter: getNodeType
      });

      /**
       * Release all memory if this refSet was not provided as an configuration option.
       * If provided as configuration option, then provider is responsible for cleanup.
       */
      if (options.dereference.refSet === null) {
        refSet.clean();
      }
      return dereferencedElement;
    }
  }
});
export { OpenApi3_1DereferenceVisitor };
export { resolveSchema$refField, maybeRefractToSchemaElement } from "../../../resolve/strategies/openapi-3-1/util.mjs";
export default OpenApi3_1DereferenceStrategy;