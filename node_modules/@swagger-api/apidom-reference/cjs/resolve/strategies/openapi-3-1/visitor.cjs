"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
exports.__esModule = true;
exports.default = void 0;
var _stampit = _interopRequireDefault(require("stampit"));
var _ramda = require("ramda");
var _ramdaAdjunct = require("ramda-adjunct");
var _apidomCore = require("@swagger-api/apidom-core");
var _apidomError = require("@swagger-api/apidom-error");
var _apidomJsonPointer = require("@swagger-api/apidom-json-pointer");
var _apidomNsOpenapi = require("@swagger-api/apidom-ns-openapi-3-1");
var _MaximumDereferenceDepthError = _interopRequireDefault(require("../../../errors/MaximumDereferenceDepthError.cjs"));
var _MaximumResolveDepthError = _interopRequireDefault(require("../../../errors/MaximumResolveDepthError.cjs"));
var _EvaluationJsonSchemaUriError = _interopRequireDefault(require("../../../errors/EvaluationJsonSchemaUriError.cjs"));
var url = _interopRequireWildcard(require("../../../util/url.cjs"));
var _index = _interopRequireDefault(require("../../../parse/index.cjs"));
var _Reference = _interopRequireDefault(require("../../../Reference.cjs"));
var _File = _interopRequireDefault(require("../../../util/File.cjs"));
var _uri = require("../../../dereference/strategies/openapi-3-1/selectors/uri.cjs");
var _util = require("./util.cjs");
var _$anchor = require("../../../dereference/strategies/openapi-3-1/selectors/$anchor.cjs");
// @ts-ignore
const visitAsync = _apidomCore.visit[Symbol.for('nodejs.util.promisify.custom')];

// eslint-disable-next-line @typescript-eslint/naming-convention
const OpenApi3_1ResolveVisitor = (0, _stampit.default)({
  props: {
    indirections: [],
    namespace: null,
    reference: null,
    crawledElements: null,
    crawlingMap: null,
    visited: null,
    options: null
  },
  init({
    reference,
    namespace,
    indirections = [],
    visited = new WeakSet(),
    options
  }) {
    this.indirections = indirections;
    this.namespace = namespace;
    this.reference = reference;
    this.crawledElements = [];
    this.crawlingMap = {};
    this.visited = visited;
    this.options = options;
  },
  methods: {
    toBaseURI(uri) {
      return url.resolve(this.reference.uri, url.sanitize(url.stripHash(uri)));
    },
    async toReference(uri) {
      // detect maximum depth of resolution
      if (this.reference.depth >= this.options.resolve.maxDepth) {
        throw new _MaximumResolveDepthError.default(`Maximum resolution depth of ${this.options.resolve.maxDepth} has been exceeded by file "${this.reference.uri}"`);
      }
      const baseURI = this.toBaseURI(uri);
      const {
        refSet
      } = this.reference;

      // we've already processed this Reference in past
      if (refSet.has(baseURI)) {
        return refSet.find((0, _ramda.propEq)(baseURI, 'uri'));
      }
      const parseResult = await (0, _index.default)(url.unsanitize(baseURI), {
        ...this.options,
        parse: {
          ...this.options.parse,
          mediaType: 'text/plain'
        }
      });

      // register new Reference with ReferenceSet
      const reference = (0, _Reference.default)({
        uri: baseURI,
        value: parseResult,
        depth: this.reference.depth + 1
      });
      refSet.add(reference);
      return reference;
    },
    ReferenceElement(referenceElement) {
      const uri = (0, _apidomCore.toValue)(referenceElement.$ref);
      const retrievalURI = this.toBaseURI(uri);

      // ignore resolving external Reference Objects
      if (!this.options.resolve.external && url.stripHash(this.reference.uri) !== retrievalURI) {
        // skip traversing this reference element and all it's child elements
        return false;
      }
      if (!(0, _ramda.has)(retrievalURI, this.crawlingMap)) {
        this.crawlingMap[retrievalURI] = this.toReference(uri);
      }
      this.crawledElements.push(referenceElement);
      return undefined;
    },
    PathItemElement(pathItemElement) {
      // ignore PathItemElement without $ref field
      if (!(0, _apidomCore.isStringElement)(pathItemElement.$ref)) {
        return undefined;
      }
      const uri = (0, _apidomCore.toValue)(pathItemElement.$ref);
      const retrievalURI = this.toBaseURI(uri);

      // ignore resolving external Path Item Objects
      if (!this.options.resolve.external && url.stripHash(this.reference.uri) !== retrievalURI) {
        // skip traversing this Path Item element but traverse all it's child elements
        return undefined;
      }
      if (!(0, _ramda.has)(retrievalURI, this.crawlingMap)) {
        this.crawlingMap[retrievalURI] = this.toReference(uri);
      }
      this.crawledElements.push(pathItemElement);
      return undefined;
    },
    LinkElement(linkElement) {
      // ignore LinkElement without operationRef or operationId field
      if (!(0, _apidomCore.isStringElement)(linkElement.operationRef) && !(0, _apidomCore.isStringElement)(linkElement.operationId)) {
        return undefined;
      }
      const uri = (0, _apidomCore.toValue)(linkElement.operationRef);
      const retrievalURI = this.toBaseURI(uri);

      // ignore resolving external Path Item Elements
      const isExternal = url.stripHash(this.reference.uri) !== retrievalURI;
      if (!this.options.resolve.external && isExternal) {
        return undefined;
      }

      // operationRef and operationId are mutually exclusive
      if ((0, _apidomCore.isStringElement)(linkElement.operationRef) && (0, _apidomCore.isStringElement)(linkElement.operationId)) {
        throw new _apidomError.ApiDOMError('LinkElement operationRef and operationId are mutually exclusive.');
      }
      if (isExternal) {
        if (!(0, _ramda.has)(retrievalURI, this.crawlingMap)) {
          this.crawlingMap[retrievalURI] = this.toReference(uri);
        }
      }
      return undefined;
    },
    ExampleElement(exampleElement) {
      // ignore ExampleElement without externalValue field
      if (!(0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
        return undefined;
      }

      // value and externalValue fields are mutually exclusive
      if (exampleElement.hasKey('value') && (0, _apidomCore.isStringElement)(exampleElement.externalValue)) {
        throw new _apidomError.ApiDOMError('ExampleElement value and externalValue fields are mutually exclusive.');
      }
      const uri = (0, _apidomCore.toValue)(exampleElement.externalValue);
      const retrievalURI = this.toBaseURI(uri);

      // ignore resolving external Example Objects
      if (!this.options.resolve.external && url.stripHash(this.reference.uri) !== retrievalURI) {
        // skip traversing this Example element but traverse all it's child elements
        return undefined;
      }
      if (!(0, _ramda.has)(retrievalURI, this.crawlingMap)) {
        this.crawlingMap[retrievalURI] = this.toReference(uri);
      }
      return undefined;
    },
    async SchemaElement(schemaElement) {
      /**
       * Skip traversal for already visited schemas and all their child schemas.
       * visit function detects cycles in path automatically.
       */
      if (this.visited.has(schemaElement)) {
        return false;
      }
      // skip current referencing schema as $ref keyword was not defined
      if (!(0, _apidomCore.isStringElement)(schemaElement.$ref)) {
        // mark current referencing schema as visited
        this.visited.add(schemaElement);
        // skip traversing this schema but traverse all it's child schemas
        return undefined;
      }

      // compute baseURI using rules around $id and $ref keywords
      const reference = await this.toReference(url.unsanitize(this.reference.uri));
      let {
        uri: retrievalURI
      } = reference;
      const $refBaseURI = (0, _util.resolveSchema$refField)(retrievalURI, schemaElement);
      const $refBaseURIStrippedHash = url.stripHash($refBaseURI);
      const file = (0, _File.default)({
        uri: $refBaseURIStrippedHash
      });
      const isUnknownURI = (0, _ramda.none)(r => r.canRead(file), this.options.resolve.resolvers);
      const isURL = !isUnknownURI;
      const isExternalURL = uri => url.stripHash(this.reference.uri) !== uri;
      if (!(0, _ramda.has)($refBaseURIStrippedHash, this.crawlingMap)) {
        try {
          if (isUnknownURI || isURL) {
            this.crawlingMap[$refBaseURIStrippedHash] = reference;
          } else {
            retrievalURI = this.toBaseURI((0, _apidomCore.toValue)($refBaseURI));

            // ignore resolving external Schema Objects
            if (!this.options.resolve.external && isExternalURL(retrievalURI)) {
              // skip traversing this schema element but traverse all it's child elements
              this.visited.add(schemaElement);
              return undefined;
            }
            this.crawlingMap[$refBaseURIStrippedHash] = this.toReference(url.unsanitize($refBaseURI));
          }
        } catch (error) {
          if (isURL && error instanceof _EvaluationJsonSchemaUriError.default) {
            retrievalURI = this.toBaseURI(url.unsanitize($refBaseURI));

            // ignore resolving external Schema Objects
            if (!this.options.resolve.external && isExternalURL(retrievalURI)) {
              // skip traversing this schema element but traverse all it's child elements
              this.visited.add(schemaElement);
              return undefined;
            }
            this.crawlingMap[$refBaseURIStrippedHash] = this.toReference(url.unsanitize($refBaseURI));
          } else {
            throw error;
          }
        }
      }
      this.crawledElements.push(schemaElement);
      return undefined;
    },
    async crawlReferenceElement(referenceElement) {
      // @ts-ignore
      const reference = await this.toReference((0, _apidomCore.toValue)(referenceElement.$ref));
      this.indirections.push(referenceElement);
      const jsonPointer = (0, _apidomJsonPointer.uriToPointer)((0, _apidomCore.toValue)(referenceElement.$ref));

      // possibly non-semantic fragment
      let fragment = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);

      // applying semantics to a fragment
      if ((0, _apidomCore.isPrimitiveElement)(fragment)) {
        const referencedElementType = (0, _apidomCore.toValue)(referenceElement.meta.get('referenced-element'));
        if ((0, _apidomNsOpenapi.isReferenceLikeElement)(fragment)) {
          // handling indirect references
          fragment = _apidomNsOpenapi.ReferenceElement.refract(fragment);
          fragment.setMetaProperty('referenced-element', referencedElementType);
        } else {
          // handling direct references
          const ElementClass = this.namespace.getElementClass(referencedElementType);
          fragment = ElementClass.refract(fragment);
        }
      }

      // detect direct or circular reference
      if (this.indirections.includes(fragment)) {
        throw new _apidomError.ApiDOMError('Recursive Reference Object detected');
      }

      // detect maximum depth of dereferencing
      if (this.indirections.length > this.options.dereference.maxDepth) {
        throw new _MaximumDereferenceDepthError.default(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
      }

      // dive deep into the fragment
      const visitor = OpenApi3_1ResolveVisitor({
        reference,
        namespace: this.namespace,
        indirections: [...this.indirections],
        options: this.options
      });
      await visitAsync(fragment, visitor, {
        keyMap: _apidomNsOpenapi.keyMap,
        nodeTypeGetter: _apidomNsOpenapi.getNodeType
      });
      await visitor.crawl();
      this.indirections.pop();
    },
    async crawlPathItemElement(pathItemElement) {
      // @ts-ignore
      const reference = await this.toReference((0, _apidomCore.toValue)(pathItemElement.$ref));
      this.indirections.push(pathItemElement);
      const jsonPointer = (0, _apidomJsonPointer.uriToPointer)((0, _apidomCore.toValue)(pathItemElement.$ref));

      // possibly non-semantic fragment
      let referencedElement = (0, _apidomJsonPointer.evaluate)(jsonPointer, reference.value.result);

      // applying semantics to a fragment
      if ((0, _apidomCore.isPrimitiveElement)(referencedElement)) {
        referencedElement = _apidomNsOpenapi.PathItemElement.refract(referencedElement);
      }

      // detect direct or indirect reference
      if (this.indirections.includes(referencedElement)) {
        throw new _apidomError.ApiDOMError('Recursive Path Item Object reference detected');
      }

      // detect maximum depth of dereferencing
      if (this.indirections.length > this.options.dereference.maxDepth) {
        throw new _MaximumDereferenceDepthError.default(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
      }

      // dive deep into the fragment
      const visitor = OpenApi3_1ResolveVisitor({
        reference,
        namespace: this.namespace,
        indirections: [...this.indirections],
        options: this.options
      });
      await visitAsync(referencedElement, visitor, {
        keyMap: _apidomNsOpenapi.keyMap,
        nodeTypeGetter: _apidomNsOpenapi.getNodeType
      });
      await visitor.crawl();
      this.indirections.pop();
    },
    async crawlSchemaElement(referencingElement) {
      // compute baseURI using rules around $id and $ref keywords
      let reference = await this.toReference(url.unsanitize(this.reference.uri));
      let {
        uri: retrievalURI
      } = reference;
      const $refBaseURI = (0, _util.resolveSchema$refField)(retrievalURI, referencingElement);
      const $refBaseURIStrippedHash = url.stripHash($refBaseURI);
      const file = (0, _File.default)({
        uri: $refBaseURIStrippedHash
      });
      const isUnknownURI = (0, _ramda.none)(r => r.canRead(file), this.options.resolve.resolvers);
      const isURL = !isUnknownURI;
      const isExternalURL = uri => url.stripHash(this.reference.uri) !== uri;
      this.indirections.push(referencingElement);

      // determining reference, proper evaluation and selection mechanism
      let referencedElement;
      try {
        if (isUnknownURI || isURL) {
          // we're dealing with canonical URI or URL with possible fragment
          const selector = $refBaseURI;
          referencedElement = (0, _uri.evaluate)(selector,
          // @ts-ignore
          (0, _util.maybeRefractToSchemaElement)(reference.value.result));
        } else {
          // we're assuming here that we're dealing with JSON Pointer here
          retrievalURI = this.toBaseURI((0, _apidomCore.toValue)($refBaseURI));

          // ignore resolving external Schema Objects
          if (!this.options.resolve.external && isExternalURL(retrievalURI)) {
            // skip traversing this schema element but traverse all it's child elements
            return undefined;
          }
          reference = await this.toReference(url.unsanitize($refBaseURI));
          const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
          referencedElement = (0, _util.maybeRefractToSchemaElement)(
          // @ts-ignore
          (0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
        }
      } catch (error) {
        /**
         * No SchemaElement($id=URL) was not found, so we're going to try to resolve
         * the URL and assume the returned response is a JSON Schema.
         */
        if (isURL && error instanceof _EvaluationJsonSchemaUriError.default) {
          if ((0, _$anchor.isAnchor)((0, _$anchor.uriToAnchor)($refBaseURI))) {
            // we're dealing with JSON Schema $anchor here
            retrievalURI = this.toBaseURI((0, _apidomCore.toValue)($refBaseURI));

            // ignore resolving external Schema Objects
            if (!this.options.resolve.external && isExternalURL(retrievalURI)) {
              // skip traversing this schema element but traverse all it's child elements
              return undefined;
            }
            reference = await this.toReference(url.unsanitize($refBaseURI));
            const selector = (0, _$anchor.uriToAnchor)($refBaseURI);
            referencedElement = (0, _$anchor.evaluate)(selector,
            // @ts-ignore
            (0, _util.maybeRefractToSchemaElement)(reference.value.result));
          } else {
            // we're assuming here that we're dealing with JSON Pointer here
            retrievalURI = this.toBaseURI((0, _apidomCore.toValue)($refBaseURI));

            // ignore resolving external Schema Objects
            if (!this.options.resolve.external && isExternalURL(retrievalURI)) {
              // skip traversing this schema element but traverse all it's child elements
              return undefined;
            }
            reference = await this.toReference(url.unsanitize($refBaseURI));
            const selector = (0, _apidomJsonPointer.uriToPointer)($refBaseURI);
            referencedElement = (0, _util.maybeRefractToSchemaElement)(
            // @ts-ignore
            (0, _apidomJsonPointer.evaluate)(selector, reference.value.result));
          }
        } else {
          throw error;
        }
      }

      // mark current referencing schema as visited
      this.visited.add(referencingElement);

      // detect direct or indirect reference
      if (this.indirections.includes(referencedElement)) {
        throw new _apidomError.ApiDOMError('Recursive Schema Object reference detected');
      }

      // detect maximum depth of dereferencing
      if (this.indirections.length > this.options.dereference.maxDepth) {
        throw new _MaximumDereferenceDepthError.default(`Maximum dereference depth of "${this.options.dereference.maxDepth}" has been exceeded in file "${this.reference.uri}"`);
      }

      // dive deep into the fragment
      const visitor = OpenApi3_1ResolveVisitor({
        reference,
        namespace: this.namespace,
        indirections: [...this.indirections],
        options: this.options,
        visited: this.visited
      });
      await visitAsync(referencedElement, visitor, {
        keyMap: _apidomNsOpenapi.keyMap,
        nodeTypeGetter: _apidomNsOpenapi.getNodeType
      });
      await visitor.crawl();
      this.indirections.pop();
      return undefined;
    },
    async crawl() {
      /**
       * Synchronize all parallel resolutions in this place.
       * After synchronization happened we can be sure that refSet
       * contains resolved Reference objects.
       */
      await (0, _ramda.pipe)(_ramda.values, _ramdaAdjunct.allP)(this.crawlingMap);
      this.crawlingMap = null;

      /* eslint-disable no-await-in-loop */
      for (const element of this.crawledElements) {
        if ((0, _apidomNsOpenapi.isReferenceElement)(element)) {
          await this.crawlReferenceElement(element);
        } else if ((0, _apidomNsOpenapi.isSchemaElement)(element)) {
          await this.crawlSchemaElement(element);
        } else if ((0, _apidomNsOpenapi.isPathItemElement)(element)) {
          await this.crawlPathItemElement(element);
        }
      }
      /* eslint-enable */
    }
  }
});
var _default = exports.default = OpenApi3_1ResolveVisitor;