"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs3/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
exports.__esModule = true;
exports.resolveSchema$refField = exports.maybeRefractToSchemaElement = exports.default = void 0;
var _stampit = _interopRequireDefault(require("stampit"));
var _ramda = require("ramda");
var _apidomCore = require("@swagger-api/apidom-core");
var _apidomNsOpenapi = _interopRequireWildcard(require("@swagger-api/apidom-ns-openapi-3-1"));
var _DereferenceStrategy = _interopRequireDefault(require("../DereferenceStrategy.cjs"));
var _Reference = _interopRequireDefault(require("../../../Reference.cjs"));
var _ReferenceSet = _interopRequireDefault(require("../../../ReferenceSet.cjs"));
var _visitor = _interopRequireDefault(require("./visitor.cjs"));
exports.OpenApi3_1DereferenceVisitor = _visitor.default;
var _util = require("../../../resolve/strategies/openapi-3-1/util.cjs");
exports.resolveSchema$refField = _util.resolveSchema$refField;
exports.maybeRefractToSchemaElement = _util.maybeRefractToSchemaElement;
// @ts-ignore
const visitAsync = _apidomCore.visit[Symbol.for('nodejs.util.promisify.custom')];

// eslint-disable-next-line @typescript-eslint/naming-convention
const OpenApi3_1DereferenceStrategy = (0, _stampit.default)(_DereferenceStrategy.default, {
  init() {
    this.name = 'openapi-3-1';
  },
  methods: {
    canDereference(file) {
      var _file$parseResult;
      // assert by media type
      if (file.mediaType !== 'text/plain') {
        return _apidomNsOpenapi.mediaTypes.includes(file.mediaType);
      }

      // assert by inspecting ApiDOM
      return (0, _apidomNsOpenapi.isOpenApi3_1Element)((_file$parseResult = file.parseResult) == null ? void 0 : _file$parseResult.result);
    },
    async dereference(file, options) {
      const namespace = (0, _apidomCore.createNamespace)(_apidomNsOpenapi.default);
      const refSet = (0, _ramda.defaultTo)((0, _ReferenceSet.default)(), options.dereference.refSet);
      let reference;
      if (!refSet.has(file.uri)) {
        reference = (0, _Reference.default)({
          uri: file.uri,
          value: file.parseResult
        });
        refSet.add(reference);
      } else {
        // pre-computed refSet was provided as configuration option
        reference = refSet.find((0, _ramda.propEq)(file.uri, 'uri'));
      }
      const visitor = (0, _visitor.default)({
        reference,
        namespace,
        options
      });
      const dereferencedElement = await visitAsync(refSet.rootRef.value, visitor, {
        keyMap: _apidomNsOpenapi.keyMap,
        nodeTypeGetter: _apidomNsOpenapi.getNodeType
      });

      /**
       * Release all memory if this refSet was not provided as an configuration option.
       * If provided as configuration option, then provider is responsible for cleanup.
       */
      if (options.dereference.refSet === null) {
        refSet.clean();
      }
      return dereferencedElement;
    }
  }
});
var _default = exports.default = OpenApi3_1DereferenceStrategy;