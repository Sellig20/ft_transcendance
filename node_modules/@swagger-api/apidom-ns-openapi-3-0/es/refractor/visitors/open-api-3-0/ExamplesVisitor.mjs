import stampit from 'stampit';
import { ObjectElement } from '@swagger-api/apidom-core';
import MapVisitor from "../generics/MapVisitor.mjs";
import FallbackVisitor from "../FallbackVisitor.mjs";
import { isReferenceLikeElement } from "../../predicates.mjs";
import { isReferenceElement } from "../../../predicates.mjs";
const ExamplesVisitor = stampit(MapVisitor, FallbackVisitor, {
  props: {
    specPath: element => isReferenceLikeElement(element) ? ['document', 'objects', 'Reference'] : ['document', 'objects', 'Example'],
    canSupportSpecificationExtensions: true
  },
  init() {
    this.element = new ObjectElement();
    this.element.classes.push('examples');
  },
  methods: {
    ObjectElement(objectElement) {
      // @ts-ignore
      const result = MapVisitor.compose.methods.ObjectElement.call(this, objectElement);
      this.element.filter(isReferenceElement).forEach(referenceElement => {
        referenceElement.setMetaProperty('referenced-element', 'example');
      });
      return result;
    }
  }
});
export default ExamplesVisitor;