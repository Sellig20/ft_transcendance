import stampit from 'stampit';
import ComponentsParametersElement from "../../../../elements/nces/ComponentsParameters.mjs";
import MapVisitor from "../../generics/MapVisitor.mjs";
import FallbackVisitor from "../../FallbackVisitor.mjs";
import { isReferenceLikeElement } from "../../../predicates.mjs";
import { isReferenceElement } from "../../../../predicates.mjs";
const ParametersVisitor = stampit(MapVisitor, FallbackVisitor, {
  props: {
    specPath: element => {
      return isReferenceLikeElement(element) ? ['document', 'objects', 'Reference'] : ['document', 'objects', 'Parameter'];
    }
  },
  init() {
    this.element = new ComponentsParametersElement();
  },
  methods: {
    ObjectElement(objectElement) {
      // @ts-ignore
      const result = MapVisitor.compose.methods.ObjectElement.call(this, objectElement);

      // decorate every ReferenceElement with metadata about their referencing type
      this.element.filter(isReferenceElement).forEach(referenceElement => {
        referenceElement.setMetaProperty('referenced-element', 'parameter');
      });
      return result;
    }
  }
});
export default ParametersVisitor;