import stampit from 'stampit';
import { test, always } from 'ramda';
import { toValue } from '@swagger-api/apidom-core';
import CallbackElement from "../../../../elements/Callback.mjs";
import PatternedFieldsVisitor from "../../generics/PatternedFieldsVisitor.mjs";
import FallbackVisitor from "../../FallbackVisitor.mjs";
import MapVisitor from "../../generics/MapVisitor.mjs";
import { isPathItemElement } from "../../../../predicates.mjs";
const CallbackVisitor = stampit(PatternedFieldsVisitor, FallbackVisitor, {
  props: {
    fieldPatternPredicate: test(/{(?<expression>.*)}/),
    specPath: always(['document', 'objects', 'PathItem']),
    canSupportSpecificationExtensions: true
  },
  init() {
    this.element = new CallbackElement();
  },
  methods: {
    ObjectElement(objectElement) {
      // @ts-ignore
      const result = MapVisitor.compose.methods.ObjectElement.call(this, objectElement);

      // decorate every PathItemElement with Callback Object expression metadata
      this.element.filter(isPathItemElement).forEach((pathItemElement, key) => {
        pathItemElement.setMetaProperty('runtime-expression', toValue(key));
      });
      return result;
    }
  }
});
export default CallbackVisitor;