/// <reference types="@swagger-api/apidom-core/types/minim" />
import { MediaTypes, NamespacePluginOptions, StringElement, Meta, Attributes, ObjectElement, ArrayElement, BooleanElement, NumberElement, ElementPredicate, Element as Element$1, MemberElement } from '@swagger-api/apidom-core';
export { isArrayElement, isBooleanElement, isElement, isLinkElement, isMemberElement, isNullElement, isNumberElement, isObjectElement, isRefElement, isStringElement } from '@swagger-api/apidom-core';
import * as minim from 'minim';
import { JSONSchemaElement } from '@swagger-api/apidom-ns-json-schema-draft-7';

type Format = 'generic' | 'json' | 'yaml';
declare class AsyncAPIMediaTypes extends MediaTypes<string> {
    filterByFormat(format?: Format): string[];
    findBy(version?: string, format?: Format): string;
    latest(format?: Format): string;
}
declare const mediaTypes: AsyncAPIMediaTypes;

declare const asyncApi2: {
    namespace: (options: NamespacePluginOptions) => minim.Namespace;
};

declare const plugin: () => () => {
    visitor: {
        StringElement(element: StringElement, key: any, parent: any, path: any, ancestors: any[]): any;
    };
};

declare class AsyncApiVersion extends StringElement {
    constructor(content?: string, meta?: Meta, attributes?: Attributes);
}

declare class DefaultContentType extends StringElement {
    constructor(content?: string, meta?: Meta, attributes?: Attributes);
}

declare class Identifier extends StringElement {
    constructor(content?: string, meta?: Meta, attributes?: Attributes);
}

declare class Components extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get schemas(): ObjectElement | undefined;
    set schemas(schemas: ObjectElement | undefined);
    get servers(): ObjectElement | undefined;
    set servers(servers: ObjectElement | undefined);
    get serverVariables(): ObjectElement | undefined;
    set serverVariables(serverVariables: ObjectElement | undefined);
    get messages(): ObjectElement | undefined;
    set messages(messages: ObjectElement | undefined);
    get securitySchemes(): ObjectElement | undefined;
    set securitySchemes(securitySchemes: ObjectElement | undefined);
    get parameters(): ObjectElement | undefined;
    set parameters(parameters: ObjectElement | undefined);
    get correlationIds(): ObjectElement | undefined;
    set correlationIds(correlationIds: ObjectElement | undefined);
    get operationTraits(): ObjectElement | undefined;
    set operationTraits(operationTraits: ObjectElement | undefined);
    get messageTraits(): ObjectElement | undefined;
    set messageTraits(messageTraits: ObjectElement | undefined);
    get serverBindings(): ObjectElement | undefined;
    set serverBindings(serverBindings: ObjectElement | undefined);
    get channelBindings(): ObjectElement | undefined;
    set channelBindings(channelBindings: ObjectElement | undefined);
    get operationBindings(): ObjectElement | undefined;
    set operationBindings(operationBindings: ObjectElement | undefined);
    get messageBindings(): ObjectElement | undefined;
    set messageBindings(messageBindings: ObjectElement | undefined);
}

declare class Contact extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
    get email(): StringElement | undefined;
    set email(email: StringElement | undefined);
}

declare class License extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
}

declare class Info extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get termsOfService(): StringElement | undefined;
    set termsOfService(tos: StringElement | undefined);
    get version(): StringElement | undefined;
    set version(version: StringElement | undefined);
    get license(): License | undefined;
    set license(licenseElement: License | undefined);
    get contact(): Contact | undefined;
    set contact(contactElement: Contact | undefined);
}

declare class Channels extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Servers extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Tags extends ArrayElement {
    constructor(content?: unknown[], meta?: Meta, attributes?: Attributes);
}

declare class ExternalDocumentation extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
}

declare class AsyncApi2 extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get asyncapi(): AsyncApiVersion | undefined;
    set asyncapi(asyncapi: AsyncApiVersion | undefined);
    get idProp(): Identifier | undefined;
    set idProp(id: Identifier | undefined);
    get info(): Info | undefined;
    set info(info: Info | undefined);
    get servers(): Servers | undefined;
    set servers(servers: Servers | undefined);
    get defaultContentType(): DefaultContentType | undefined;
    set defaultContentType(defaultContentType: DefaultContentType | undefined);
    get channels(): Channels | undefined;
    set channels(channels: Channels | undefined);
    get components(): Components | undefined;
    set components(components: Components | undefined);
    get tags(): Tags | undefined;
    set tags(tags: Tags | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
}

declare class HttpChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Reference extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    set $ref($ref: StringElement | undefined);
    get $ref(): StringElement | undefined;
}

declare class Schema extends JSONSchemaElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    /**
     * Validation vocabulary
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01
     */
    /**
     *  Validation Keywords for Applying Subschemas With Boolean Logic
     *
     *  URI: https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.7
     */
    get not(): this | BooleanElement | Reference | undefined | any;
    /**
     *  Validation Keywords for Applying Subschemas Conditionally
     *
     *  URI: https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.6
     */
    get if(): this | BooleanElement | Reference | undefined;
    set if(ifValue: this | BooleanElement | Reference | undefined);
    get then(): this | BooleanElement | Reference | undefined;
    set then(then: this | BooleanElement | Reference | undefined);
    get else(): this | BooleanElement | Reference | undefined;
    set else(elseValue: this | BooleanElement | Reference | undefined);
    /**
     * Validation Keywords for Arrays
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.4
     */
    get items(): this | BooleanElement | Reference | ArrayElement | undefined | any;
    set items(items: this | BooleanElement | Reference | ArrayElement | undefined | any);
    get additionalItems(): this | BooleanElement | Reference | undefined;
    set additionalItems(additionalItems: this | BooleanElement | Reference | undefined);
    get containsProp(): this | BooleanElement | Reference | undefined;
    set containsProp(contains: this | BooleanElement | Reference | undefined);
    /**
     * Validation Keywords for Objects
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-handrews-json-schema-validation-01#section-6.5
     */
    get propertyNames(): this | BooleanElement | Reference | undefined;
    set propertyNames(propertyNames: this | BooleanElement | Reference | undefined);
    /**
     * AsyncAPI vocabulary
     *
     * URI: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#fixed-fields-21
     */
    get discriminator(): StringElement | undefined;
    get externalDocs(): ExternalDocumentation | undefined;
    get deprecated(): BooleanElement | undefined;
}

declare class WebSocketChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get method(): StringElement | undefined;
    set method(method: StringElement | undefined);
    get query(): Schema | Reference | undefined;
    set query(query: Schema | Reference | undefined);
    get headers(): Schema | Reference | undefined;
    set headers(headers: Schema | Reference | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class KafkaChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get topic(): StringElement | undefined;
    set topic(topic: StringElement | undefined);
    get partitions(): NumberElement | undefined;
    set partitions(partitions: NumberElement | undefined);
    get replicas(): NumberElement | undefined;
    set replicas(replicas: NumberElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class AnypointmqChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get destination(): StringElement | undefined;
    set destination(destination: StringElement | undefined);
    get destinationType(): StringElement | undefined;
    set destinationType(destinationType: StringElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class AmqpChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get is(): StringElement | undefined;
    set is(is: StringElement | undefined);
    get exchange(): ObjectElement | undefined;
    set exchange(exchange: ObjectElement | undefined);
    get queue(): ObjectElement | undefined;
    set queue(queue: ObjectElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class Amqp1ChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MqttChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Mqtt5ChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class NatsChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class JmsChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SnsChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SolaceChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SqsChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StompChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class RedisChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MercureChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class IbmmqChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get destinationType(): StringElement | undefined;
    set destinationType(destinationType: StringElement | undefined);
    get queue(): ObjectElement | undefined;
    set queue(queue: ObjectElement | undefined);
    get topic(): ObjectElement | undefined;
    set topic(topic: ObjectElement | undefined);
    get maxMsgLength(): NumberElement | undefined;
    set maxMsgLength(maxMsgLength: NumberElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class GooglepubsubChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
    get labels(): ObjectElement | undefined;
    set labels(labels: ObjectElement | undefined);
    get messageRetentionDuration(): StringElement | undefined;
    set messageRetentionDuration(messageRetentionDuration: StringElement | undefined);
    get messageStoragePolicy(): ObjectElement | undefined;
    set messageStoragePolicy(messageStoragePolicy: ObjectElement | undefined);
    get schemaSettings(): ObjectElement | undefined;
    set schemaSettings(schemaSettings: ObjectElement | undefined);
    get topic(): StringElement | undefined;
    set topic(topic: StringElement | undefined);
}

declare class ChannelBindings extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get http(): HttpChannelBinding | undefined;
    set http(http: HttpChannelBinding | undefined);
    get ws(): WebSocketChannelBinding | undefined;
    set ws(ws: WebSocketChannelBinding | undefined);
    get kafka(): KafkaChannelBinding | undefined;
    set kafka(kafka: KafkaChannelBinding | undefined);
    get anypointmq(): AnypointmqChannelBinding | undefined;
    set anypointmq(anypointmq: AnypointmqChannelBinding | undefined);
    get amqp(): AmqpChannelBinding | undefined;
    set amqp(amqp: AmqpChannelBinding | undefined);
    get amqp1(): Amqp1ChannelBinding | undefined;
    set amqp1(amqp1: Amqp1ChannelBinding | undefined);
    get mqtt(): MqttChannelBinding | undefined;
    set mqtt(mqtt: MqttChannelBinding | undefined);
    get mqtt5(): Mqtt5ChannelBinding | undefined;
    set mqtt5(mqtt5: Mqtt5ChannelBinding | undefined);
    get nats(): NatsChannelBinding | undefined;
    set nats(nats: NatsChannelBinding | undefined);
    get jms(): JmsChannelBinding | undefined;
    set jms(jms: JmsChannelBinding | undefined);
    get sns(): SnsChannelBinding | undefined;
    set sns(sns: SnsChannelBinding | undefined);
    get solace(): SolaceChannelBinding | undefined;
    set solace(solace: SolaceChannelBinding | undefined);
    get sqs(): SqsChannelBinding | undefined;
    set sqs(sqs: SqsChannelBinding | undefined);
    get stomp(): StompChannelBinding | undefined;
    set stomp(stomp: StompChannelBinding | undefined);
    get redis(): RedisChannelBinding | undefined;
    set redis(redis: RedisChannelBinding | undefined);
    get mercure(): MercureChannelBinding | undefined;
    set mercure(mercure: MercureChannelBinding | undefined);
    get googlepubsub(): GooglepubsubChannelBinding | undefined;
    set googlepubsub(googlepubsub: GooglepubsubChannelBinding | undefined);
    get ibmmq(): IbmmqChannelBinding | undefined;
    set ibmmq(ibmmq: IbmmqChannelBinding | undefined);
}

declare class HttpOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get method(): StringElement | undefined;
    set method(method: StringElement | undefined);
    get query(): Schema | Reference | undefined;
    set query(query: Schema | Reference | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class WebSocketOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class KafkaOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get groupId(): Schema | Reference | undefined;
    set groupId(groupId: Schema | Reference | undefined);
    get clientId(): Schema | Reference | undefined;
    set clientId(clientId: Schema | Reference | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class AnypointmqOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class AmqpOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get expiration(): NumberElement | undefined;
    set expiration(expiration: NumberElement | undefined);
    get userId(): StringElement | undefined;
    set userId(userId: StringElement | undefined);
    get cc(): ArrayElement | undefined;
    set cc(cc: ArrayElement | undefined);
    get priority(): NumberElement | undefined;
    set priority(priority: NumberElement | undefined);
    get deliveryMode(): NumberElement | undefined;
    set deliveryMode(deliveryMode: NumberElement | undefined);
    get mandatory(): BooleanElement | undefined;
    set mandatory(mandatory: BooleanElement | undefined);
    get bcc(): ArrayElement | undefined;
    set bcc(bcc: ArrayElement | undefined);
    get replyTo(): StringElement | undefined;
    set replyTo(replyTo: StringElement | undefined);
    get timestamp(): BooleanElement | undefined;
    set timestamp(timestamp: BooleanElement | undefined);
    get ack(): BooleanElement | undefined;
    set ack(ack: BooleanElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class Amqp1OperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MqttOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get qos(): NumberElement | undefined;
    set qos(qos: NumberElement | undefined);
    get retain(): BooleanElement | undefined;
    set retain(retain: BooleanElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class Mqtt5OperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class NatsOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get queue(): StringElement | undefined;
    set queue(queue: StringElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class JmsOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SnsOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SolaceOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
    get destinations(): ArrayElement | undefined;
    set destinations(destinations: ArrayElement | undefined);
}

declare class SqsOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StompOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class RedisOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MercureOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class IbmmqOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class GooglepubsubOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class OperationBindings extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get http(): HttpOperationBinding | undefined;
    set http(http: HttpOperationBinding | undefined);
    get ws(): WebSocketOperationBinding | undefined;
    set ws(ws: WebSocketOperationBinding | undefined);
    get kafka(): KafkaOperationBinding | undefined;
    set kafka(kafka: KafkaOperationBinding | undefined);
    get anypointmq(): AnypointmqOperationBinding | undefined;
    set anypointmq(anypointmq: AnypointmqOperationBinding | undefined);
    get amqp(): AmqpOperationBinding | undefined;
    set amqp(amqp: AmqpOperationBinding | undefined);
    get amqp1(): Amqp1OperationBinding | undefined;
    set amqp1(amqp1: Amqp1OperationBinding | undefined);
    get mqtt(): MqttOperationBinding | undefined;
    set mqtt(mqtt: MqttOperationBinding | undefined);
    get mqtt5(): Mqtt5OperationBinding | undefined;
    set mqtt5(mqtt5: Mqtt5OperationBinding | undefined);
    get nats(): NatsOperationBinding | undefined;
    set nats(nats: NatsOperationBinding | undefined);
    get jms(): JmsOperationBinding | undefined;
    set jms(jms: JmsOperationBinding | undefined);
    get sns(): SnsOperationBinding | undefined;
    set sns(sns: SnsOperationBinding | undefined);
    get solace(): SolaceOperationBinding | undefined;
    set solace(solace: SolaceOperationBinding | undefined);
    get sqs(): SqsOperationBinding | undefined;
    set sqs(sqs: SqsOperationBinding | undefined);
    get stomp(): StompOperationBinding | undefined;
    set stomp(stomp: StompOperationBinding | undefined);
    get redis(): RedisOperationBinding | undefined;
    set redis(redis: RedisOperationBinding | undefined);
    get mercure(): MercureOperationBinding | undefined;
    set mercure(mercure: MercureOperationBinding | undefined);
    get googlepubsub(): GooglepubsubOperationBinding | undefined;
    set googlepubsub(googlepubsub: GooglepubsubOperationBinding | undefined);
    get ibmmq(): IbmmqOperationBinding | undefined;
    set ibmmq(ibmmq: IbmmqOperationBinding | undefined);
}

declare class CorrelationID extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get location(): StringElement | undefined;
    set location(location: StringElement | undefined);
}

declare class HttpMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get headers(): Schema | Reference | undefined;
    set headers(headers: Schema | Reference | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class WebSocketMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class KafkaMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get key(): Schema | Reference | undefined;
    set key(key: Schema | Reference | undefined);
    get schemaIdLocation(): StringElement | undefined;
    set schemaIdLocation(schemaIdLocation: StringElement | undefined);
    get schemaIdPayloadEncoding(): StringElement | undefined;
    set schemaIdPayloadEncoding(schemaIdPayloadEncoding: StringElement | undefined);
    get schemaLookupStrategy(): StringElement | undefined;
    set schemaLookupStrategy(schemaLookupStrategy: StringElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class AnypointmqMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get headers(): Schema | Reference | undefined;
    set headers(headers: Schema | Reference | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class AmqpMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get contentEncoding(): StringElement | undefined;
    set contentEncoding(contentEncoding: StringElement | undefined);
    get messageType(): StringElement | undefined;
    set messageType(messageType: StringElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class Amqp1MessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MqttMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class Mqtt5MessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class NatsMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class JmsMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SnsMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SolaceMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SqsMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StompMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class RedisMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MercureMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class IbmmqMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get headers(): StringElement | undefined;
    set headers(headers: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get expiry(): NumberElement | undefined;
    set expiry(expiry: NumberElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class GooglepubsubMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
    get attributesProp(): ObjectElement | undefined;
    set attributesProp(attributes: ObjectElement | undefined);
    get orderingKey(): StringElement | undefined;
    set orderingKey(orderingKey: StringElement | undefined);
    get schema(): ObjectElement | undefined;
    set schema(schema: ObjectElement | undefined);
}

declare class MessageBindings extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get http(): HttpMessageBinding | undefined;
    set http(http: HttpMessageBinding | undefined);
    get ws(): WebSocketMessageBinding | undefined;
    set ws(ws: WebSocketMessageBinding | undefined);
    get kafka(): KafkaMessageBinding | undefined;
    set kafka(kafka: KafkaMessageBinding | undefined);
    get anypointmq(): AnypointmqMessageBinding | undefined;
    set anypointmq(anypointmq: AnypointmqMessageBinding | undefined);
    get amqp(): AmqpMessageBinding | undefined;
    set amqp(amqp: AmqpMessageBinding | undefined);
    get amqp1(): Amqp1MessageBinding | undefined;
    set amqp1(amqp1: Amqp1MessageBinding | undefined);
    get mqtt(): MqttMessageBinding | undefined;
    set mqtt(mqtt: MqttMessageBinding | undefined);
    get mqtt5(): Mqtt5MessageBinding | undefined;
    set mqtt5(mqtt5: Mqtt5MessageBinding | undefined);
    get nats(): NatsMessageBinding | undefined;
    set nats(nats: NatsMessageBinding | undefined);
    get jms(): JmsMessageBinding | undefined;
    set jms(jms: JmsMessageBinding | undefined);
    get sns(): SnsMessageBinding | undefined;
    set sns(sns: SnsMessageBinding | undefined);
    get solace(): SolaceMessageBinding | undefined;
    set solace(solace: SolaceMessageBinding | undefined);
    get sqs(): SqsMessageBinding | undefined;
    set sqs(sqs: SqsMessageBinding | undefined);
    get stomp(): StompMessageBinding | undefined;
    set stomp(stomp: StompMessageBinding | undefined);
    get redis(): RedisMessageBinding | undefined;
    set redis(redis: RedisMessageBinding | undefined);
    get mercure(): MercureMessageBinding | undefined;
    set mercure(mercure: MercureMessageBinding | undefined);
    get googlepubsub(): GooglepubsubMessageBinding | undefined;
    set googlepubsub(googlepubsub: GooglepubsubMessageBinding | undefined);
    get ibmmq(): IbmmqMessageBinding | undefined;
    set ibmmq(ibmmq: IbmmqMessageBinding | undefined);
}

declare class Message extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get messageId(): StringElement | undefined;
    set messageId(messageId: StringElement | undefined);
    get headers(): Schema | Reference | undefined;
    set headers(headers: Schema | Reference | undefined);
    get payload(): Schema | Reference | Element | undefined;
    set payload(payload: Schema | Reference | Element | undefined);
    get correlationId(): CorrelationID | Reference | undefined;
    set correlationId(correlationId: CorrelationID | Reference | undefined);
    get schemaFormat(): StringElement;
    set schemaFormat(schemaFormat: StringElement);
    get contentType(): StringElement;
    set contentType(contentType: StringElement);
    get name(): StringElement;
    set name(name: StringElement);
    get title(): StringElement;
    set title(title: StringElement);
    get summary(): StringElement;
    set summary(summary: StringElement);
    get description(): StringElement;
    set description(description: StringElement);
    get tags(): Tags | undefined;
    set tags(tags: Tags | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
    get bindings(): MessageBindings | Reference | undefined;
    set bindings(bindings: MessageBindings | Reference | undefined);
    get examples(): ArrayElement | undefined;
    set examples(examples: ArrayElement | undefined);
    get traits(): ArrayElement | undefined;
    set traits(traits: ArrayElement | undefined);
}

declare class Operation extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get operationId(): StringElement | undefined;
    set operationId(operationId: StringElement | undefined);
    get summary(): StringElement | undefined;
    set summary(summary: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get security(): ArrayElement | undefined;
    set security(security: ArrayElement | undefined);
    get tags(): Tags | undefined;
    set tags(tags: Tags | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
    get bindings(): OperationBindings | Reference | undefined;
    set bindings(bindings: OperationBindings | Reference | undefined);
    get traits(): ArrayElement | undefined;
    set traits(traits: ArrayElement | undefined);
    get message(): Message | Reference | ObjectElement | undefined;
    set message(message: Message | Reference | ObjectElement | undefined);
}

declare class Parameters extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class ChannelItem extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get $ref(): StringElement | undefined;
    set $ref($ref: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get servers(): ArrayElement | undefined;
    set servers(servers: ArrayElement | undefined);
    get subscribe(): Operation | undefined;
    set subscribe(subscribe: Operation | undefined);
    get publish(): Operation | undefined;
    set publish(publish: Operation | undefined);
    get parameters(): Parameters | undefined;
    set parameters(parameters: Parameters | undefined);
    get bindings(): ChannelBindings | undefined;
    set bindings(bindings: ChannelBindings | undefined);
}

declare class Parameter extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get schema(): Schema | Reference | undefined;
    set schema(schema: Schema | Reference | undefined);
    get location(): StringElement | undefined;
    set location(location: StringElement | undefined);
}

declare class SecurityRequirement extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class HttpServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class WebSocketServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class KafkaServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get schemaRegistryUrl(): StringElement | undefined;
    set schemaRegistryUrl(schemaRegistryUrl: StringElement | undefined);
    get schemaRegistryVendor(): StringElement | undefined;
    set schemaRegistryVendor(schemaRegistryVendor: StringElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class AnypointmqServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class AmqpServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Amqp1ServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MqttServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get clientId(): StringElement | undefined;
    set clientId(clientId: StringElement | undefined);
    get cleanSession(): BooleanElement | undefined;
    set cleanSession(cleanSession: BooleanElement | undefined);
    get lastWill(): ObjectElement | undefined;
    set lastWill(lastWill: ObjectElement | undefined);
    get keepAlive(): NumberElement | undefined;
    set keepAlive(keepAlive: NumberElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class Mqtt5ServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class NatsServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class JmsServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SnsServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SolaceServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
    get msgVpn(): StringElement | undefined;
    set msgVpn(msgVpn: StringElement | undefined);
}

declare class SqsServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class StompServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class RedisServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class MercureServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class IbmmqServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get groupId(): StringElement | undefined;
    set groupId(groupId: StringElement | undefined);
    get ccdtQueueManagerName(): StringElement | undefined;
    set ccdtQueueManagerName(ccdtQueueManagerName: StringElement | undefined);
    get cipherSpec(): StringElement | undefined;
    set cipherSpec(cipherSpec: StringElement | undefined);
    get multiEndpointServer(): BooleanElement | undefined;
    set multiEndpointServer(multiEndpointServer: BooleanElement | undefined);
    get heartBeatInterval(): NumberElement | undefined;
    set heartBeatInterval(heartBeatInterval: NumberElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class GooglepubsubServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class ServerBindings extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get http(): HttpServerBinding | undefined;
    set http(http: HttpServerBinding | undefined);
    get ws(): WebSocketServerBinding | undefined;
    set ws(ws: WebSocketServerBinding | undefined);
    get kafka(): KafkaServerBinding | undefined;
    set kafka(kafka: KafkaServerBinding | undefined);
    get anypointmq(): AnypointmqServerBinding | undefined;
    set anypointmq(anypointmq: AnypointmqServerBinding | undefined);
    get amqp(): AmqpServerBinding | undefined;
    set amqp(amqp: AmqpServerBinding | undefined);
    get amqp1(): Amqp1ServerBinding | undefined;
    set amqp1(amqp1: Amqp1ServerBinding | undefined);
    get mqtt(): MqttServerBinding | undefined;
    set mqtt(mqtt: MqttServerBinding | undefined);
    get mqtt5(): Mqtt5ServerBinding | undefined;
    set mqtt5(mqtt5: Mqtt5ServerBinding | undefined);
    get nats(): NatsServerBinding | undefined;
    set nats(nats: NatsServerBinding | undefined);
    get jms(): JmsServerBinding | undefined;
    set jms(jms: JmsServerBinding | undefined);
    get sns(): SnsServerBinding | undefined;
    set sns(sns: SnsServerBinding | undefined);
    get solace(): SolaceServerBinding | undefined;
    set solace(solace: SolaceServerBinding | undefined);
    get sqs(): SqsServerBinding | undefined;
    set sqs(sqs: SqsServerBinding | undefined);
    get stomp(): StompServerBinding | undefined;
    set stomp(stomp: StompServerBinding | undefined);
    get redis(): RedisServerBinding | undefined;
    set redis(redis: RedisServerBinding | undefined);
    get mercure(): MercureServerBinding | undefined;
    set mercure(mercure: MercureServerBinding | undefined);
    get googlepubsub(): GooglepubsubServerBinding | undefined;
    set googlepubsub(googlepubsub: GooglepubsubServerBinding | undefined);
    get ibmmq(): IbmmqServerBinding | undefined;
    set ibmmq(ibmmq: IbmmqServerBinding | undefined);
}

declare class Server extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
    get protocol(): StringElement | undefined;
    set protocol(protocol: StringElement | undefined);
    get protocolVersion(): StringElement | undefined;
    set protocolVersion(protocolVersion: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get variables(): ObjectElement | undefined;
    set variables(variables: ObjectElement | undefined);
    get tags(): ArrayElement | undefined;
    set tags(tags: ArrayElement | undefined);
    get security(): ArrayElement | undefined;
    set security(security: ArrayElement | undefined);
    get bindings(): ServerBindings | undefined;
    set bindings(bindings: ServerBindings | undefined);
}

declare class ServerVariable extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get enum(): ArrayElement | undefined;
    set enum(value: ArrayElement | undefined);
    get default(): StringElement | undefined;
    set default(value: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get examples(): ArrayElement | undefined;
    set examples(examples: ArrayElement | undefined);
}

declare const isAsyncApi2Element: ElementPredicate<AsyncApi2>;
declare const isAsyncApiVersionElement: ElementPredicate<AsyncApiVersion>;
declare const isChannelBindingsElement: ElementPredicate<ChannelBindings>;
declare const isChannelItemElement: ElementPredicate<ChannelItem>;
declare const isChannelsElement: ElementPredicate<Channels>;
declare const isComponentsElement: ElementPredicate<Components>;
declare const isContactElement: ElementPredicate<Contact>;
declare const isIdentifierElement: ElementPredicate<Identifier>;
declare const isInfoElement: ElementPredicate<Info>;
declare const isLicenseElement: ElementPredicate<License>;
declare const isOperationElement: ElementPredicate<Operation>;
declare const isParameterElement: ElementPredicate<Parameter>;
declare const isParametersElement: ElementPredicate<Parameters>;
declare const isReferenceElement: ElementPredicate<Reference>;
declare const isSchemaElement: ElementPredicate<Schema>;
declare const isBooleanJsonSchemaElement: ElementPredicate<BooleanElement>;
declare const isSecurityRequirementElement: ElementPredicate<SecurityRequirement>;
declare const isServerElement: ElementPredicate<Server>;
declare const isServerBindingsElement: ElementPredicate<ServerBindings>;
declare const isServersElement: ElementPredicate<Servers>;
declare const isServerVariableElement: ElementPredicate<ServerVariable>;

declare const isAsyncApi2LikeElement: <T extends Element$1>(element: T) => boolean;
declare const isParameterLikeElement: <T extends Element$1>(element: T) => boolean;
declare const isReferenceLikeElement: <T extends Element$1>(element: T) => boolean;
declare const isSchemaLikeElement: <T extends Element$1>(element: T) => boolean;
declare const isSecurityRequirementLikeElement: <T extends Element$1>(element: T) => boolean;
declare const isServerLikeElement: <T extends Element$1>(element: T) => boolean;
declare const isAsyncApiExtension: (element: MemberElement) => boolean;

declare const getNodeType: <T extends Element$1>(element: T) => string | undefined;
declare const keyMap: {
    ObjectElement: string[];
    ArrayElement: string[];
    MemberElement: string[];
    StringElement: never[];
    BooleanElement: never[];
    NumberElement: never[];
    NullElement: never[];
    RefElement: never[];
    LinkElement: never[];
    Annotation: never[];
    Comment: never[];
    ParseResultElement: string[];
    SourceMap: string[];
    /**
     * AsyncApi >= 2.0.0 <=2.6.0 specification elements.
     */
    AsyncApi2Element: string[];
    AsyncApiVersionElement: never[];
    ChannelBindingsElement: string[];
    ChannelItemElement: string[];
    ChannelsElement: string[];
    ComponentsElement: string[];
    ContactElement: string[];
    CorrelationIDElement: string[];
    DefaultContentType: never[];
    ExternalDocumentationElement: string[];
    InfoElement: string[];
    LicenseElement: string[];
    MessageElement: string[];
    MessageBindingsElement: string[];
    MessageTraitElement: string[];
    OAuthFlowElement: string[];
    OAuthFlowsElement: string[];
    OperationElement: string[];
    OperationBindingsElement: string[];
    OperationTraitElement: string[];
    ParameterElement: string[];
    ParametersElement: string[];
    ReferenceElement: string[];
    SchemaElement: string[];
    SecurityRequirementElement: string[];
    SecuritySchemeElement: string[];
    ServerElement: string[];
    ServerBindingsElement: string[];
    ServersElement: string[];
    ServerVariableElement: string[];
    TagElement: string[];
    TagsElement: string[];
    /**
     * Binding elements.
     */
    AmqpChannelBindingElement: string[];
    AmqpMessageBindingElement: string[];
    AmqpOperationBindingElement: string[];
    AmqpServerBindingElement: string[];
    Amqp1ChannelBindingElement: string[];
    Amqp1MessageBindingElement: string[];
    Amqp1OperationBindingElement: string[];
    Amqp1ServerBindingElement: string[];
    AnypointmqChannelBindingElement: string[];
    AnypointmqMessageBindingElement: string[];
    AnypointmqOperationBindingElement: string[];
    AnypointmqServerBindingElement: string[];
    GooglepubsubChannelBindingElement: string[];
    GooglepubsubMessageBindingElement: string[];
    GooglepubsubOperationBindingElement: string[];
    GooglepubsubServerBindingElement: string[];
    HttpChannelBindingElement: string[];
    HttpMessageBindingElement: string[];
    HttpOperationBindingElement: string[];
    HttpServerBindingElement: string[];
    IbmmqChannelBindingElement: string[];
    IbmmqMessageBindingElement: string[];
    IbmmqChannelOperationElement: string[];
    IbmmqServerBindingElement: string[];
    JmsChannelBindingElement: string[];
    JmsMessageBindingElement: string[];
    JmsOperationBindingElement: string[];
    JmsServerBindingElement: string[];
    KafkaChannelBindingElement: string[];
    KafkaMessageBindingElement: string[];
    KafkaOperationBindingElement: string[];
    KafkaServerBindingElement: string[];
    MercureChannelBindingElement: string[];
    MercureMessageBindingElement: string[];
    MercureOperationBindingElement: string[];
    MercureServerBindingElement: string[];
    MqttChannelBindingElement: string[];
    MqttMessageBindingElement: string[];
    MqttOperationBindingElement: string[];
    MqttServerBindingElement: string[];
    Mqtt5ChannelBindingElement: string[];
    Mqtt5MessageBindingElement: string[];
    Mqtt5OperationBindingElement: string[];
    Mqtt5ServerBindingElement: string[];
    NatsChannelBindingElement: string[];
    NatsMessageBindingElement: string[];
    NatsOperationBindingElement: string[];
    NatsServerBindingElement: string[];
    PulsarChannelBindingElement: string[];
    PulsarMessageBindingElement: string[];
    PulsarOperationBindingElement: string[];
    PulsarServerBindingElement: string[];
    RedisChannelBindingElement: string[];
    RedisMessageBindingElement: string[];
    RedisOperationBindingElement: string[];
    RedisServerBindingElement: string[];
    SnsChannelBindingElement: string[];
    SnsMessageBindingElement: string[];
    SnsOperationBindingElement: string[];
    SnsServerBindingElement: string[];
    SolaceChannelBindingElement: string[];
    SolaceMessageBindingElement: string[];
    SolaceOperationBindingElement: string[];
    SolaceServerBindingElement: string[];
    SqsChannelBindingElement: string[];
    SqsMessageBindingElement: string[];
    SqsOperationBindingElement: string[];
    SqsServerBindingElement: string[];
    StompChannelBindingElement: string[];
    StompMessageBindingElement: string[];
    StompOperationBindingElement: string[];
    StompServerBindingElement: string[];
    WebSocketChannelBindingElement: string[];
    WebSocketMessageBindingElement: string[];
    WebSocketOperationBindingElement: string[];
    WebSocketServerBindingElement: string[];
};

declare class MessageExample extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get headers(): ObjectElement | undefined;
    set headers(headers: ObjectElement | undefined);
    get payload(): Element | undefined;
    set payload(payload: Element | undefined);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get summary(): StringElement | undefined;
    set summary(summary: StringElement | undefined);
}

declare class MessageTrait extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get messageId(): StringElement | undefined;
    set messageId(messageId: StringElement | undefined);
    get headers(): Schema | Reference | undefined;
    set headers(headers: Schema | Reference | undefined);
    get correlationId(): CorrelationID | Reference | undefined;
    set correlationId(correlationId: CorrelationID | Reference | undefined);
    get schemaFormat(): StringElement | undefined;
    set schemaFormat(schemaFormat: StringElement | undefined);
    get contentType(): StringElement | undefined;
    set contentType(contentType: StringElement | undefined);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get summary(): StringElement | undefined;
    set summary(summary: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get tags(): Tags | undefined;
    set tags(tags: Tags | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
    get bindings(): MessageBindings | Reference | undefined;
    set bindings(bindings: MessageBindings | Reference | undefined);
    get examples(): ArrayElement | undefined;
    set examples(examples: ArrayElement | undefined);
}

declare class OAuthFlow extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get authorizationUrl(): StringElement | undefined;
    set authorizationUrl(authorizationUrl: StringElement | undefined);
    get tokenUrl(): StringElement | undefined;
    set tokenUrl(tokenUrl: StringElement | undefined);
    get refreshUrl(): StringElement | undefined;
    set refreshUrl(refreshUrl: StringElement | undefined);
    get scopes(): ObjectElement | undefined;
    set scopes(scopes: ObjectElement | undefined);
}

declare class OAuthFlows extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get implicit(): OAuthFlow | undefined;
    set implicit(implicit: OAuthFlow | undefined);
    get password(): OAuthFlow | undefined;
    set password(password: OAuthFlow | undefined);
    get clientCredentials(): OAuthFlow | undefined;
    set clientCredentials(clientCredentials: OAuthFlow | undefined);
    get authorizationCode(): OAuthFlow | undefined;
    set authorizationCode(authorizationCode: OAuthFlow | undefined);
}

declare class OperationTrait extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get operationId(): StringElement | undefined;
    set operationId(operationId: StringElement | undefined);
    get summary(): StringElement | undefined;
    set summary(summary: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get security(): ArrayElement | undefined;
    set security(security: ArrayElement | undefined);
    get tags(): Tags | undefined;
    set tags(tags: Tags | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
    get bindings(): OperationBindings | Reference | undefined;
    set bindings(bindings: OperationBindings | Reference | undefined);
}

declare class SecurityScheme extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get in(): StringElement | undefined;
    set in(inVal: StringElement | undefined);
    get scheme(): StringElement | undefined;
    set scheme(scheme: StringElement | undefined);
    get bearerFormat(): StringElement | undefined;
    set bearerFormat(bearerFormat: StringElement | undefined);
    get flows(): OAuthFlows | undefined;
    set flows(flows: OAuthFlows | undefined);
    get openIdConnectUrl(): StringElement | undefined;
    set openIdConnectUrl(openIdConnectUrl: StringElement | undefined);
}

declare class Tag extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
}

declare class PulsarChannelBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get namespace(): StringElement | undefined;
    set namespace(namespace: StringElement | undefined);
    get persistence(): StringElement | undefined;
    set persistence(persistence: StringElement | undefined);
    get compaction(): NumberElement | undefined;
    set compaction(compaction: NumberElement | undefined);
    get ['geo-replication'](): ArrayElement | undefined;
    set ['geo-replication'](geoReplication: ArrayElement | undefined);
    get retention(): ObjectElement | undefined;
    set retention(retention: ObjectElement | undefined);
    get ttl(): NumberElement | undefined;
    set ttl(ttl: NumberElement | undefined);
    get deduplication(): BooleanElement | undefined;
    set deduplication(deduplication: BooleanElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

declare class PulsarMessageBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class PulsarOperationBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class PulsarServerBinding extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get tenant(): StringElement | undefined;
    set tenant(tenant: StringElement | undefined);
    get bindingVersion(): StringElement | undefined;
    set bindingVersion(bindingVersion: StringElement | undefined);
}

export { Amqp1ChannelBinding as Amqp1ChannelBindingElement, Amqp1MessageBinding as Amqp1MessageBindingElement, Amqp1OperationBinding as Amqp1OperationBindingElement, Amqp1ServerBinding as Amqp1ServerBindingElement, AmqpChannelBinding as AmqpChannelBindingElement, AmqpMessageBinding as AmqpMessageBindingElement, AmqpOperationBinding as AmqpOperationBindingElement, AmqpServerBinding as AmqpServerBindingElement, AnypointmqChannelBinding as AnypointmqChannelBindingElement, AnypointmqMessageBinding as AnypointmqMessageBindingElement, AnypointmqOperationBinding as AnypointmqOperationBindingElement, AnypointmqServerBinding as AnypointmqServerBindingElement, AsyncAPIMediaTypes, AsyncApi2 as AsyncApi2Element, AsyncApiVersion as AsyncApiVersionElement, ChannelBindings as ChannelBindingsElement, ChannelItem as ChannelItemElement, Channels as ChannelsElement, Components as ComponentsElement, Contact as ContactElement, CorrelationID as CorrelationIDElement, DefaultContentType as DefaultContentTypeElement, ExternalDocumentation as ExternalDocumentationElement, GooglepubsubChannelBinding as GooglepubsubChannelBindingElement, GooglepubsubMessageBinding as GooglepubsubMessageBindingElement, GooglepubsubOperationBinding as GooglepubsubOperationBindingElement, GooglepubsubServerBinding as GooglepubsubServerBindingElement, HttpChannelBinding as HttpChannelBindingElement, HttpMessageBinding as HttpMessageBindingElement, HttpOperationBinding as HttpOperationBindingElement, HttpServerBinding as HttpServerBindingElement, IbmmqChannelBinding as IbmmqChannelBindingElement, IbmmqMessageBinding as IbmmqMessageBindingElement, IbmmqOperationBinding as IbmmqOperationBindingElement, IbmmqServerBinding as IbmmqServerBindingElement, Identifier as IdentifierElement, Info as InfoElement, JmsChannelBinding as JmsChannelBindingElement, JmsMessageBinding as JmsMessageBindingElement, JmsOperationBinding as JmsOperationBindingElement, JmsServerBinding as JmsServerBindingElement, KafkaChannelBinding as KafkaChannelBindingElement, KafkaMessageBinding as KafkaMessageBindingElement, KafkaOperationBinding as KafkaOperationBindingElement, KafkaServerBinding as KafkaServerBindingElement, License as LicenseElement, MercureChannelBinding as MercureChannelBindingElement, MercureMessageBinding as MercureMessageBindingElement, MercureOperationBinding as MercureOperationBindingElement, MercureServerBinding as MercureServerBindingElement, MessageBindings as MessageBindingsElement, Message as MessageElement, MessageExample as MessageExampleElement, MessageTrait as MessageTraitElement, Mqtt5ChannelBinding as Mqtt5ChannelBindingElement, Mqtt5MessageBinding as Mqtt5MessageBindingElement, Mqtt5OperationBinding as Mqtt5OperationBindingElement, Mqtt5ServerBinding as Mqtt5ServerBindingElement, MqttChannelBinding as MqttChannelBindingElement, MqttMessageBinding as MqttMessageBindingElement, MqttOperationBinding as MqttOperationBindingElement, MqttServerBinding as MqttServerBindingElement, NatsChannelBinding as NatsChannelBindingElement, NatsMessageBinding as NatsMessageBindingElement, NatsOperationBinding as NatsOperationBindingElement, NatsServerBinding as NatsServerBindingElement, OAuthFlow as OAuthFlowElement, OAuthFlows as OAuthFlowsElement, OperationBindings as OperationBindingsElement, Operation as OperationElement, OperationTrait as OperationTraitElement, Parameter as ParameterElement, Parameters as ParametersElement, PulsarChannelBinding as PulsarChannelBindingElement, PulsarMessageBinding as PulsarMessageBindingElement, PulsarOperationBinding as PulsarOperationBindingElement, PulsarServerBinding as PulsarServerBindingElement, RedisChannelBinding as RedisChannelBindingElement, RedisMessageBinding as RedisMessageBindingElement, RedisOperationBinding as RedisOperationBindingElement, RedisServerBinding as RedisServerBindingElement, Reference as ReferenceElement, Schema as SchemaElement, SecurityRequirement as SecurityRequirementElement, SecurityScheme as SecuritySchemeElement, ServerBindings as ServerBindingsElement, Server as ServerElement, ServerVariable as ServerVariableElement, Servers as ServersElement, SnsChannelBinding as SnsChannelBindingElement, SnsMessageBinding as SnsMessageBindingElement, SnsOperationBinding as SnsOperationBindingElement, SnsServerBinding as SnsServerBindingElement, SolaceChannelBinding as SolaceChannelBindingElement, SolaceMessageBinding as SolaceMessageBindingElement, SolaceOperationBinding as SolaceOperationBindingElement, SolaceServerBinding as SolaceServerBindingElement, SqsChannelBinding as SqsChannelBindingElement, SqsMessageBinding as SqsMessageBindingElement, SqsOperationBinding as SqsOperationBindingElement, SqsServerBinding as SqsServerBindingElement, StompChannelBinding as StompChannelBindingElement, StompMessageBinding as StompMessageBindingElement, StompOperationBinding as StompOperationBindingElement, StompServerBinding as StompServerBindingElement, Tag as TagElement, Tags as TagsElement, WebSocketChannelBinding as WebSocketChannelBindingElement, WebSocketMessageBinding as WebSocketMessageBindingElement, WebSocketOperationBinding as WebSocketOperationBindingElement, WebSocketServerBinding as WebSocketServerBindingElement, asyncApi2 as default, getNodeType, isAsyncApi2Element, isAsyncApi2LikeElement, isAsyncApiExtension, isAsyncApiVersionElement, isBooleanJsonSchemaElement, isChannelBindingsElement, isChannelItemElement, isChannelsElement, isComponentsElement, isContactElement, isIdentifierElement, isInfoElement, isLicenseElement, isOperationElement, isParameterElement, isParameterLikeElement, isParametersElement, isReferenceElement, isReferenceLikeElement, isSchemaElement, isSchemaLikeElement, isSecurityRequirementElement, isSecurityRequirementLikeElement, isServerBindingsElement, isServerElement, isServerLikeElement, isServerVariableElement, isServersElement, keyMap, mediaTypes, plugin as refractorPluginReplaceEmptyElement };
