/// <reference types="@swagger-api/apidom-core/types/minim" />
import * as _swagger_api_apidom_core from '@swagger-api/apidom-core';
import { MediaTypes, NamespacePluginOptions, StringElement, Element, Meta, Attributes, ObjectElement, ArrayElement, BooleanElement, NumberElement, MemberElement } from '@swagger-api/apidom-core';
export { isArrayElement, isBooleanElement, isElement, isLinkElement as isLinkPrimitiveElement, isMemberElement, isNullElement, isNumberElement, isObjectElement, isRefElement, isStringElement } from '@swagger-api/apidom-core';
import { JSONSchemaElement, JSONReferenceElement, MediaElement } from '@swagger-api/apidom-ns-json-schema-draft-4';
export { JSONReferenceElement, isJSONReferenceElement, isJSONReferenceLikeElement } from '@swagger-api/apidom-ns-json-schema-draft-4';
import * as minim from 'minim';
import * as stampit from 'stampit';
import stampit__default from 'stampit';

type Format = 'generic' | 'json' | 'yaml';
declare class OpenAPIMediaTypes extends MediaTypes<string> {
    filterByFormat(format?: Format): string[];
    findBy(version?: string, format?: Format): string;
    latest(format?: Format): string;
}
declare const mediaTypes: OpenAPIMediaTypes;

declare const openApi2: {
    namespace: (options: NamespacePluginOptions) => minim.Namespace;
};

declare const plugin: () => () => {
    visitor: {
        StringElement(element: StringElement, key: any, parent: any, path: any, ancestors: any[]): any;
    };
};

declare const refract: <T extends Element>(value: unknown, { specPath, plugins }?: {
    specPath?: string[] | undefined;
    plugins?: never[] | undefined;
}) => T;
declare const createRefractor: (specPath: string[]) => (value: unknown, options?: {}) => Element;

declare const specification: {
    visitors: {
        value: stampit.default.Stamp<any>;
        document: {
            objects: {
                JSONReference: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        $ref: stampit.default.Stamp<any>;
                    };
                };
                JSONSchema: {
                    $ref: string;
                };
                Swagger: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        swagger: stampit.default.Stamp<any>;
                        info: {
                            $ref: string;
                        };
                        host: stampit.default.Stamp<any>;
                        basePath: stampit.default.Stamp<any>;
                        schemes: stampit.default.Stamp<any>;
                        consumes: stampit.default.Stamp<any>;
                        produces: stampit.default.Stamp<any>;
                        paths: {
                            $ref: string;
                        };
                        definitions: {
                            $ref: string;
                        };
                        parameters: {
                            $ref: string;
                        };
                        responses: {
                            $ref: string;
                        };
                        securityDefinitions: {
                            $ref: string;
                        };
                        security: stampit.default.Stamp<any>;
                        tags: stampit.default.Stamp<any>;
                        externalDocs: {
                            $ref: string;
                        };
                    };
                };
                Info: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        title: {
                            $ref: string;
                        };
                        description: {
                            $ref: string;
                        };
                        termsOfService: {
                            $ref: string;
                        };
                        contact: {
                            $ref: string;
                        };
                        license: {
                            $ref: string;
                        };
                        version: stampit.default.Stamp<any>;
                    };
                };
                Contact: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        name: {
                            $ref: string;
                        };
                        url: {
                            $ref: string;
                        };
                        email: {
                            $ref: string;
                        };
                    };
                };
                License: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        name: {
                            $ref: string;
                        };
                        url: {
                            $ref: string;
                        };
                    };
                };
                Paths: {
                    $visitor: stampit.default.Stamp<any>;
                };
                PathItem: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        $ref: stampit.default.Stamp<any>;
                        get: {
                            $ref: string;
                        };
                        put: {
                            $ref: string;
                        };
                        post: {
                            $ref: string;
                        };
                        delete: {
                            $ref: string;
                        };
                        options: {
                            $ref: string;
                        };
                        head: {
                            $ref: string;
                        };
                        patch: {
                            $ref: string;
                        };
                        parameters: stampit.default.Stamp<any>;
                    };
                };
                Operation: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        tags: stampit.default.Stamp<any>;
                        summary: {
                            $ref: string;
                        };
                        description: {
                            $ref: string;
                        };
                        externalDocs: {
                            $ref: string;
                        };
                        operationId: {
                            $ref: string;
                        };
                        consumes: stampit.default.Stamp<any>;
                        produces: stampit.default.Stamp<any>;
                        parameters: stampit.default.Stamp<any>;
                        responses: {
                            $ref: string;
                        };
                        schemes: stampit.default.Stamp<any>;
                        deprecated: {
                            $ref: string;
                        };
                        security: stampit.default.Stamp<any>;
                    };
                };
                ExternalDocumentation: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        description: {
                            $ref: string;
                        };
                        url: {
                            $ref: string;
                        };
                    };
                };
                Parameter: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        name: {
                            $ref: string;
                        };
                        in: {
                            $ref: string;
                        };
                        description: stampit.default.Stamp<any>;
                        required: stampit.default.Stamp<any>;
                        schema: stampit.default.Stamp<any>;
                        type: stampit.default.Stamp<any>;
                        format: stampit.default.Stamp<any>;
                        items: {
                            $ref: string;
                        };
                        collectionFormat: {
                            $ref: string;
                        };
                        default: stampit.default.Stamp<any>;
                        maximum: stampit.default.Stamp<any>;
                        exclusiveMaximum: stampit.default.Stamp<any>;
                        minimum: stampit.default.Stamp<any>;
                        exclusiveMinimum: stampit.default.Stamp<any>;
                        maxLength: stampit.default.Stamp<any>;
                        minLength: stampit.default.Stamp<any>;
                        pattern: stampit.default.Stamp<any>;
                        maxItems: stampit.default.Stamp<any>;
                        minItems: stampit.default.Stamp<any>;
                        uniqueItems: stampit.default.Stamp<any>;
                        enum: stampit.default.Stamp<any>;
                        multipleOf: stampit.default.Stamp<any>;
                    };
                };
                Items: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        type: stampit.default.Stamp<any>;
                        format: stampit.default.Stamp<any>;
                        items: {
                            $ref: string;
                        };
                        collectionFormat: {
                            $ref: string;
                        };
                        default: stampit.default.Stamp<any>;
                        maximum: stampit.default.Stamp<any>;
                        exclusiveMaximum: stampit.default.Stamp<any>;
                        minimum: stampit.default.Stamp<any>;
                        exclusiveMinimum: stampit.default.Stamp<any>;
                        maxLength: stampit.default.Stamp<any>;
                        minLength: stampit.default.Stamp<any>;
                        pattern: stampit.default.Stamp<any>;
                        maxItems: stampit.default.Stamp<any>;
                        minItems: stampit.default.Stamp<any>;
                        uniqueItems: stampit.default.Stamp<any>;
                        enum: stampit.default.Stamp<any>;
                        multipleOf: stampit.default.Stamp<any>;
                    };
                };
                Responses: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        default: stampit.default.Stamp<any>;
                    };
                };
                Response: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        description: {
                            $ref: string;
                        };
                        schema: stampit.default.Stamp<any>;
                        headers: {
                            $ref: string;
                        };
                        examples: {
                            $ref: string;
                        };
                    };
                };
                Headers: {
                    $visitor: stampit.default.Stamp<any>;
                };
                Example: {
                    $visitor: stampit.default.Stamp<any>;
                };
                Header: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        description: stampit.default.Stamp<any>;
                        type: stampit.default.Stamp<any>;
                        format: stampit.default.Stamp<any>;
                        items: {
                            $ref: string;
                        };
                        collectionFormat: {
                            $ref: string;
                        };
                        default: stampit.default.Stamp<any>;
                        maximum: stampit.default.Stamp<any>;
                        exclusiveMaximum: stampit.default.Stamp<any>;
                        minimum: stampit.default.Stamp<any>;
                        exclusiveMinimum: stampit.default.Stamp<any>;
                        maxLength: stampit.default.Stamp<any>;
                        minLength: stampit.default.Stamp<any>;
                        pattern: stampit.default.Stamp<any>;
                        maxItems: stampit.default.Stamp<any>;
                        minItems: stampit.default.Stamp<any>;
                        uniqueItems: stampit.default.Stamp<any>;
                        enum: stampit.default.Stamp<any>;
                        multipleOf: stampit.default.Stamp<any>;
                    };
                };
                Tag: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        name: {
                            $ref: string;
                        };
                        description: {
                            $ref: string;
                        };
                        externalDocs: {
                            $ref: string;
                        };
                    };
                };
                Reference: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        $ref: stampit.default.Stamp<any>;
                    };
                };
                Schema: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        format: stampit.default.Stamp<any>;
                        title: stampit.default.Stamp<any>;
                        description: stampit.default.Stamp<any>;
                        default: stampit.default.Stamp<any>;
                        multipleOf: stampit.default.Stamp<any>;
                        maximum: stampit.default.Stamp<any>;
                        exclusiveMaximum: stampit.default.Stamp<any>;
                        minimum: stampit.default.Stamp<any>;
                        exclusiveMinimum: stampit.default.Stamp<any>;
                        maxLength: stampit.default.Stamp<any>;
                        minLength: stampit.default.Stamp<any>;
                        pattern: stampit.default.Stamp<any>;
                        maxItems: stampit.default.Stamp<any>;
                        minItems: stampit.default.Stamp<any>;
                        uniqueItems: stampit.default.Stamp<any>;
                        maxProperties: stampit.default.Stamp<any>;
                        minProperties: stampit.default.Stamp<any>;
                        required: stampit.default.Stamp<any>;
                        enum: stampit.default.Stamp<any>;
                        type: stampit.default.Stamp<any>;
                        readOnly: stampit.default.Stamp<any>;
                        items: stampit.default.Stamp<any>;
                        allOf: stampit.default.Stamp<any>;
                        properties: stampit.default.Stamp<any>;
                        additionalProperties: stampit.default.Stamp<any>;
                        discriminator: {
                            $ref: string;
                        };
                        xml: {
                            $ref: string;
                        };
                        externalDocs: {
                            $ref: string;
                        };
                        example: {
                            $ref: string;
                        };
                    };
                };
                XML: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        name: {
                            $ref: string;
                        };
                        namespace: {
                            $ref: string;
                        };
                        prefix: {
                            $ref: string;
                        };
                        attribute: {
                            $ref: string;
                        };
                        wrapped: {
                            $ref: string;
                        };
                    };
                };
                Definitions: {
                    $visitor: stampit.default.Stamp<any>;
                };
                ParametersDefinitions: {
                    $visitor: stampit.default.Stamp<any>;
                };
                ResponsesDefinitions: {
                    $visitor: stampit.default.Stamp<any>;
                };
                SecurityDefinitions: {
                    $visitor: stampit.default.Stamp<any>;
                };
                SecurityScheme: {
                    $visitor: stampit.default.Stamp<any>;
                    fixedFields: {
                        type: {
                            $ref: string;
                        };
                        description: {
                            $ref: string;
                        };
                        name: {
                            $ref: string;
                        };
                        in: {
                            $ref: string;
                        };
                        flow: {
                            $ref: string;
                        };
                        authorizationUrl: {
                            $ref: string;
                        };
                        token: {
                            $ref: string;
                        };
                        scopes: {
                            $ref: string;
                        };
                    };
                };
                Scopes: {
                    $visitor: stampit.default.Stamp<any>;
                };
                SecurityRequirement: {
                    $visitor: stampit.default.Stamp<any>;
                };
            };
            extension: {
                $visitor: stampit.default.Stamp<any>;
            };
        };
    };
};

declare class SwaggerVersion extends StringElement {
    constructor(content?: string, meta?: Meta, attributes?: Attributes);
}

declare class Contact extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
    get email(): StringElement | undefined;
    set email(email: StringElement | undefined);
}

declare class License extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
}

declare class Info extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get termsOfService(): StringElement | undefined;
    set termsOfService(tos: StringElement | undefined);
    get contact(): Contact | undefined;
    set contact(contactElement: Contact | undefined);
    get license(): License | undefined;
    set license(licenseElement: License | undefined);
    get version(): StringElement | undefined;
    set version(version: StringElement | undefined);
}

declare class Paths extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Definitions extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class ParametersDefinitions extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class ResponsesDefinitions extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SecurityDefinitions extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class ExternalDocumentation extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get url(): StringElement | undefined;
    set url(url: StringElement | undefined);
}

declare class Swagger extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get swagger(): SwaggerVersion | undefined;
    set swagger(swagger: SwaggerVersion | undefined);
    get info(): Info | undefined;
    set info(info: Info | undefined);
    get host(): StringElement | undefined;
    set host(host: StringElement | undefined);
    get basePath(): StringElement | undefined;
    set basePath(basePath: StringElement | undefined);
    get schemes(): ArrayElement | undefined;
    set schemes(schemes: ArrayElement | undefined);
    get consumes(): ArrayElement | undefined;
    set consumes(consumes: ArrayElement | undefined);
    get produces(): ArrayElement | undefined;
    set produces(produces: ArrayElement | undefined);
    get paths(): Paths | undefined;
    set paths(paths: Paths | undefined);
    get definitions(): Definitions | undefined;
    set definitions(definitions: Definitions | undefined);
    get parameters(): ParametersDefinitions | undefined;
    set parameters(parameters: ParametersDefinitions | undefined);
    get responses(): ResponsesDefinitions | undefined;
    set responses(responses: ResponsesDefinitions | undefined);
    get securityDefinitions(): SecurityDefinitions | undefined;
    set securityDefinitions(securityDefinitions: SecurityDefinitions | undefined);
    get security(): ArrayElement | undefined;
    set security(security: ArrayElement | undefined);
    get tags(): ArrayElement | undefined;
    set tags(tags: ArrayElement | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
}

declare class Schema extends JSONSchemaElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    /**
     * Core vocabulary
     *
     * URI: https://tools.ietf.org/html/draft-wright-json-schema-00
     */
    get idProp(): StringElement | undefined;
    set idProp(idProps: StringElement | undefined);
    get $schema(): StringElement | undefined;
    set $schema($schema: StringElement | undefined);
    /**
     * Validation keywords for arrays
     */
    get additionalItems(): this | JSONReferenceElement | BooleanElement | undefined;
    set additionalItems(additionalItems: this | JSONReferenceElement | BooleanElement | undefined);
    /**
     * Validation keywords for objects
     */
    get patternProperties(): ObjectElement | undefined;
    set patternProperties(patternProperties: ObjectElement | undefined);
    get dependencies(): ObjectElement | undefined;
    set dependencies(dependencies: ObjectElement | undefined);
    /**
     *  Validation keywords for any instance type
     */
    get anyOf(): ArrayElement | undefined;
    set anyOf(anyOf: ArrayElement | undefined);
    get oneOf(): ArrayElement | undefined;
    set oneOf(oneOf: ArrayElement | undefined);
    get not(): this | JSONReferenceElement | undefined;
    set not(not: this | JSONReferenceElement | undefined);
    get definitions(): ObjectElement | undefined;
    set definitions(definitions: ObjectElement | undefined);
    /**
     * JSON Hyper-Schema
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-hyperschema-00
     */
    get base(): StringElement | undefined;
    set base(base: StringElement | undefined);
    get links(): ArrayElement | undefined;
    set links(links: ArrayElement | undefined);
    get media(): MediaElement | undefined;
    set media(media: MediaElement | undefined);
}

declare class Headers extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Example extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Response extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get schema(): Schema | undefined;
    set schema(schema: Schema | undefined);
    get headers(): Headers | undefined;
    set headers(headers: Headers | undefined);
    get examples(): Example | undefined;
    set examples(examples: Example | undefined);
}

declare class Reference extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get $ref(): StringElement | undefined;
    set $ref($ref: StringElement | undefined);
}

declare class Responses extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get default(): Response | Reference | undefined;
    set default(defaultValue: Response | Reference | undefined);
}

declare class Operation extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get tags(): ArrayElement | undefined;
    set tags(tags: ArrayElement | undefined);
    get summary(): StringElement | undefined;
    set summary(description: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    get operationId(): StringElement | undefined;
    set operationId(operationId: StringElement | undefined);
    get parameters(): ArrayElement | undefined;
    set parameters(parameters: ArrayElement | undefined);
    get responses(): Responses | undefined;
    set responses(responses: Responses | undefined);
    get schemes(): ArrayElement | undefined;
    set schemes(schemes: ArrayElement | undefined);
    get deprecated(): BooleanElement;
    set deprecated(deprecated: BooleanElement);
    get security(): ArrayElement | undefined;
    set security(security: ArrayElement | undefined);
}

declare class PathItem extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get $ref(): StringElement | undefined;
    set $ref($ref: StringElement | undefined);
    get GET(): Operation;
    set GET(operation: Operation | undefined);
    get PUT(): Operation;
    set PUT(operation: Operation | undefined);
    get POST(): Operation;
    set POST(operation: Operation | undefined);
    get DELETE(): Operation;
    set DELETE(operation: Operation | undefined);
    get OPTIONS(): Operation;
    set OPTIONS(operation: Operation | undefined);
    get HEAD(): Operation;
    set HEAD(operation: Operation | undefined);
    get PATCH(): Operation;
    set PATCH(operation: Operation | undefined);
    get parameters(): ArrayElement;
    set parameters(parameters: ArrayElement | undefined);
}

declare class Parameter extends JSONSchemaElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    /**
     * Core vocabulary
     *
     * URI: https://tools.ietf.org/html/draft-wright-json-schema-00
     */
    get idProp(): StringElement | undefined;
    set idProp(idProps: StringElement | undefined);
    get $schema(): StringElement | undefined;
    set $schema($schema: StringElement | undefined);
    /**
     * Validation keywords for arrays
     */
    get additionalItems(): this | JSONReferenceElement | BooleanElement | undefined;
    set additionalItems(additionalItems: this | JSONReferenceElement | BooleanElement | undefined);
    get items(): this | undefined;
    set items(items: this | undefined);
    /**
     * Validation keywords for objects
     */
    get maxProperties(): NumberElement | undefined;
    set maxProperties(maxProperties: NumberElement | undefined);
    get minProperties(): NumberElement | undefined;
    set minProperties(minProperties: NumberElement | undefined);
    get required(): BooleanElement | undefined | any;
    set required(required: BooleanElement | undefined | any);
    get properties(): ObjectElement | undefined;
    set properties(properties: ObjectElement | undefined);
    get additionalProperties(): this | JSONReferenceElement | BooleanElement | undefined;
    set additionalProperties(additionalProperties: this | JSONReferenceElement | BooleanElement | undefined);
    get patternProperties(): ObjectElement | undefined;
    set patternProperties(patternProperties: ObjectElement | undefined);
    get dependencies(): ObjectElement | undefined;
    set dependencies(dependencies: ObjectElement | undefined);
    /**
     *  Validation keywords for any instance type
     */
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get allOf(): ArrayElement | undefined;
    set allOf(allOf: ArrayElement | undefined);
    get anyOf(): ArrayElement | undefined;
    set anyOf(anyOf: ArrayElement | undefined);
    get oneOf(): ArrayElement | undefined;
    set oneOf(oneOf: ArrayElement | undefined);
    get not(): this | JSONReferenceElement | undefined;
    set not(not: this | JSONReferenceElement | undefined);
    get definitions(): ObjectElement | undefined;
    set definitions(definitions: ObjectElement | undefined);
    /**
     * Metadata keywords
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00#section-6
     */
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    /**
     * Semantic validation with "format"
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00#section-7
     */
    get format(): StringElement | undefined;
    set format(format: StringElement | undefined);
    /**
     * JSON Hyper-Schema
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-hyperschema-00
     */
    get base(): StringElement | undefined;
    set base(base: StringElement | undefined);
    get links(): ArrayElement | undefined;
    set links(links: ArrayElement | undefined);
    get media(): MediaElement | undefined;
    set media(media: MediaElement | undefined);
    get readOnly(): BooleanElement | undefined;
    set readOnly(readOnly: BooleanElement | undefined);
    /**
     * OpenAPI vocabulary
     */
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get in(): StringElement | undefined;
    set in(val: StringElement | undefined);
    get schema(): Schema | undefined;
    set schema(schema: Schema | undefined);
}

declare class Items extends JSONSchemaElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    /**
     * Core vocabulary
     *
     * URI: https://tools.ietf.org/html/draft-wright-json-schema-00
     */
    get idProp(): StringElement | undefined;
    set idProp(idProps: StringElement | undefined);
    get $schema(): StringElement | undefined;
    set $schema($schema: StringElement | undefined);
    /**
     * Validation keywords for arrays
     */
    get additionalItems(): this | JSONReferenceElement | BooleanElement | undefined;
    set additionalItems(additionalItems: this | JSONReferenceElement | BooleanElement | undefined);
    get items(): this | undefined;
    set items(items: this | undefined);
    /**
     * Validation keywords for objects
     */
    get maxProperties(): NumberElement | undefined;
    set maxProperties(maxProperties: NumberElement | undefined);
    get minProperties(): NumberElement | undefined;
    set minProperties(minProperties: NumberElement | undefined);
    get required(): ArrayElement | undefined;
    set required(required: ArrayElement | undefined);
    get properties(): ObjectElement | undefined;
    set properties(properties: ObjectElement | undefined);
    get additionalProperties(): this | JSONReferenceElement | BooleanElement | undefined;
    set additionalProperties(additionalProperties: this | JSONReferenceElement | BooleanElement | undefined);
    get patternProperties(): ObjectElement | undefined;
    set patternProperties(patternProperties: ObjectElement | undefined);
    get dependencies(): ObjectElement | undefined;
    set dependencies(dependencies: ObjectElement | undefined);
    /**
     *  Validation keywords for any instance type
     */
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get allOf(): ArrayElement | undefined;
    set allOf(allOf: ArrayElement | undefined);
    get anyOf(): ArrayElement | undefined;
    set anyOf(anyOf: ArrayElement | undefined);
    get oneOf(): ArrayElement | undefined;
    set oneOf(oneOf: ArrayElement | undefined);
    get not(): this | JSONReferenceElement | undefined;
    set not(not: this | JSONReferenceElement | undefined);
    get definitions(): ObjectElement | undefined;
    set definitions(definitions: ObjectElement | undefined);
    /**
     * Metadata keywords
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00#section-6
     */
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    /**
     * JSON Hyper-Schema
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-hyperschema-00
     */
    get base(): StringElement | undefined;
    set base(base: StringElement | undefined);
    get links(): ArrayElement | undefined;
    set links(links: ArrayElement | undefined);
    get media(): MediaElement | undefined;
    set media(media: MediaElement | undefined);
    get readOnly(): BooleanElement | undefined;
    set readOnly(readOnly: BooleanElement | undefined);
}

declare class Header extends JSONSchemaElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    /**
     * Core vocabulary
     *
     * URI: https://tools.ietf.org/html/draft-wright-json-schema-00
     */
    get idProp(): StringElement | undefined;
    set idProp(idProps: StringElement | undefined);
    get $schema(): StringElement | undefined;
    set $schema($schema: StringElement | undefined);
    /**
     * Validation keywords for arrays
     */
    get additionalItems(): this | JSONReferenceElement | BooleanElement | undefined;
    set additionalItems(additionalItems: this | JSONReferenceElement | BooleanElement | undefined);
    get items(): this | undefined;
    set items(items: this | undefined);
    /**
     * Validation keywords for objects
     */
    get maxProperties(): NumberElement | undefined;
    set maxProperties(maxProperties: NumberElement | undefined);
    get minProperties(): NumberElement | undefined;
    set minProperties(minProperties: NumberElement | undefined);
    get required(): ArrayElement | undefined;
    set required(required: ArrayElement | undefined);
    get properties(): ObjectElement | undefined;
    set properties(properties: ObjectElement | undefined);
    get additionalProperties(): this | JSONReferenceElement | BooleanElement | undefined;
    set additionalProperties(additionalProperties: this | JSONReferenceElement | BooleanElement | undefined);
    get patternProperties(): ObjectElement | undefined;
    set patternProperties(patternProperties: ObjectElement | undefined);
    get dependencies(): ObjectElement | undefined;
    set dependencies(dependencies: ObjectElement | undefined);
    /**
     *  Validation keywords for any instance type
     */
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get allOf(): ArrayElement | undefined;
    set allOf(allOf: ArrayElement | undefined);
    get anyOf(): ArrayElement | undefined;
    set anyOf(anyOf: ArrayElement | undefined);
    get oneOf(): ArrayElement | undefined;
    set oneOf(oneOf: ArrayElement | undefined);
    get not(): this | JSONReferenceElement | undefined;
    set not(not: this | JSONReferenceElement | undefined);
    get definitions(): ObjectElement | undefined;
    set definitions(definitions: ObjectElement | undefined);
    /**
     * Metadata keywords
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-validation-00#section-6
     */
    get title(): StringElement | undefined;
    set title(title: StringElement | undefined);
    /**
     * JSON Hyper-Schema
     *
     * URI: https://datatracker.ietf.org/doc/html/draft-wright-json-schema-hyperschema-00
     */
    get base(): StringElement | undefined;
    set base(base: StringElement | undefined);
    get links(): ArrayElement | undefined;
    set links(links: ArrayElement | undefined);
    get media(): MediaElement | undefined;
    set media(media: MediaElement | undefined);
    get readOnly(): BooleanElement | undefined;
    set readOnly(readOnly: BooleanElement | undefined);
}

declare class Tag extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get externalDocs(): ExternalDocumentation | undefined;
    set externalDocs(externalDocs: ExternalDocumentation | undefined);
}

declare class Xml extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get namespace(): StringElement | undefined;
    set namespace(namespace: StringElement | undefined);
    get prefix(): StringElement | undefined;
    set prefix(prefix: StringElement | undefined);
    get attribute(): BooleanElement | undefined;
    set attribute(attribute: BooleanElement | undefined);
    get wrapped(): BooleanElement | undefined;
    set wrapped(wrapped: BooleanElement | undefined);
}

declare class SecurityScheme extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
    get type(): StringElement | undefined;
    set type(type: StringElement | undefined);
    get description(): StringElement | undefined;
    set description(description: StringElement | undefined);
    get name(): StringElement | undefined;
    set name(name: StringElement | undefined);
    get in(): StringElement | undefined;
    set in(inVal: StringElement | undefined);
    get flow(): StringElement | undefined;
    set flow(flow: StringElement | undefined);
    get authorizationUrl(): StringElement | undefined;
    set authorizationUrl(authorizationUrl: StringElement | undefined);
    get tokenUrl(): StringElement | undefined;
    set tokenUrl(tokenUrl: StringElement | undefined);
    get scopes(): ArrayElement | undefined;
    set scopes(scopes: ArrayElement | undefined);
}

declare class SecurityRequirement extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare class Scopes extends ObjectElement {
    constructor(content?: Record<string, unknown>, meta?: Meta, attributes?: Attributes);
}

declare const isSwaggerElement: _swagger_api_apidom_core.ElementPredicate<Swagger>;
declare const isSwaggerVersionElement: _swagger_api_apidom_core.ElementPredicate<SwaggerVersion>;
declare const isInfoElement: _swagger_api_apidom_core.ElementPredicate<Info>;
declare const isLicenseElement: _swagger_api_apidom_core.ElementPredicate<License>;
declare const isContactElement: _swagger_api_apidom_core.ElementPredicate<Contact>;
declare const isPathsElement: _swagger_api_apidom_core.ElementPredicate<Paths>;
declare const isPathItemElement: _swagger_api_apidom_core.ElementPredicate<PathItem>;
declare const isOperationElement: _swagger_api_apidom_core.ElementPredicate<Operation>;
declare const isExternalDocumentationElement: _swagger_api_apidom_core.ElementPredicate<ExternalDocumentation>;
declare const isParameterElement: _swagger_api_apidom_core.ElementPredicate<Parameter>;
declare const isItemsElement: _swagger_api_apidom_core.ElementPredicate<Items>;
declare const isResponsesElement: _swagger_api_apidom_core.ElementPredicate<Responses>;
declare const isResponseElement: _swagger_api_apidom_core.ElementPredicate<Response>;
declare const isHeadersElement: _swagger_api_apidom_core.ElementPredicate<Headers>;
declare const isExampleElement: _swagger_api_apidom_core.ElementPredicate<Example>;
declare const isHeaderElement: _swagger_api_apidom_core.ElementPredicate<Header>;
declare const isTagElement: _swagger_api_apidom_core.ElementPredicate<Tag>;
declare const isReferenceElement: _swagger_api_apidom_core.ElementPredicate<Reference>;
declare const isSchemaElement: _swagger_api_apidom_core.ElementPredicate<Schema>;
declare const isXmlElement: _swagger_api_apidom_core.ElementPredicate<Xml>;
declare const isResponsesDefinitionsElement: _swagger_api_apidom_core.ElementPredicate<ResponsesDefinitions>;
declare const isSecurityDefinitionsElement: _swagger_api_apidom_core.ElementPredicate<SecurityDefinitions>;
declare const isDefinitionsElement: _swagger_api_apidom_core.ElementPredicate<Definitions>;
declare const isParametersDefinitionsElement: _swagger_api_apidom_core.ElementPredicate<ParametersDefinitions>;
declare const isSecuritySchemeElement: _swagger_api_apidom_core.ElementPredicate<SecurityScheme>;
declare const isScopesElement: _swagger_api_apidom_core.ElementPredicate<Scopes>;
declare const isSecurityRequirementElement: _swagger_api_apidom_core.ElementPredicate<SecurityRequirement>;

interface ReferenceLikeElement extends ObjectElement {
    hasKey: (value: '$ref') => true;
}
declare const isSwaggerExtension: (element: MemberElement) => boolean;
declare const isReferenceLikeElement: (element: unknown) => element is ReferenceLikeElement;

declare const AlternatingVisitor: stampit__default.Stamp<any>;

declare const FixedFieldsVisitor: stampit__default.Stamp<any>;

declare const MapVisitor: stampit__default.Stamp<any>;

declare const MixedFieldsVisitor: stampit__default.Stamp<any>;

declare const PatternedFieldsJsonObjectVisitor: stampit__default.Stamp<any>;

/**
 * This visitor is responsible for falling back to current traversed element
 * Given OpenApi3_0Visitor expects ObjectElement to be traversed. If
 * different Element is provided FallBackVisitor is responsible to assigning
 * this Element as current element.
 */
declare const FallbackVisitor: stampit__default.Stamp<any>;

/**
 * This is a base Type for every visitor that does
 * internal look-ups to retrieve other child visitors.
 */
declare const SpecificationVisitor: stampit__default.Stamp<any>;

declare const Visitor: stampit__default.Stamp<any>;

declare const getNodeType: <T extends Element>(element: T) => string | undefined;
/**
 * There are unfortunately two `LinkElement` types. One is from base namespace
 * and the other one if from this namespace. `LinkElement` from base namespace
 * is used extremely rarely, so it's almost always safe during traversing
 * to assume that `LinkElement` is element from this namespace.
 *
 * To be 100% sure that currently visiting `LinkElement` is from this namespace
 * use `isLinkElement` predicate from this namespace to assert for it.
 */
declare const keyMap: {
    ObjectElement: string[];
    ArrayElement: string[];
    MemberElement: string[];
    StringElement: never[];
    BooleanElement: never[];
    NumberElement: never[];
    NullElement: never[];
    RefElement: never[];
    LinkElement: never[];
    Annotation: never[];
    Comment: never[];
    ParseResultElement: string[];
    SourceMap: string[];
    SwaggerElement: string[];
    InfoElement: string[];
    ContactElement: string[];
    LicenseElement: string[];
    PathsElement: string[];
    PathItemElement: string[];
    OperationElement: string[];
    ExternalDocumentationElement: string[];
    ParameterElement: string[];
    ItemsElement: string[];
    ExampleElement: string[];
    ResponsesElement: string[];
    ResponseElement: string[];
    HeadersElement: string[];
    HeaderElement: string[];
    TagElement: string[];
    ReferenceElement: string[];
    JSONReferenceElement: string[];
    SchemaElement: string[];
    XmlElement: string[];
    DefinitionsElement: string[];
    ParametersDefinitionsElement: string[];
    ResponsesDefinitionsElement: string[];
    SecurityDefinitionsElement: string[];
    SecuritySchemeElement: string[];
    ScopesElement: string[];
    SecurityRequirementElement: string[];
};

declare class OperationConsumes extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class OperationParameters extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class OperationProduces extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class OperationSchemes extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class OperationSecurity extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class OperationTags extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class PathItemParameters extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SwaggerSchemes extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SwaggerConsumes extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SwaggerProduces extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SwaggerSecurity extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

declare class SwaggerTags extends ArrayElement {
    static primaryClass: string;
    constructor(content?: Array<unknown>, meta?: Meta, attributes?: Attributes);
}

export { AlternatingVisitor, Contact as ContactElement, Definitions as DefinitionsElement, Example as ExampleElement, ExternalDocumentation as ExternalDocumentationElement, FallbackVisitor, FixedFieldsVisitor, Header as HeaderElement, Headers as HeadersElement, Info as InfoElement, Items as ItemsElement, License as LicenseElement, MapVisitor, MixedFieldsVisitor, OpenAPIMediaTypes, OperationConsumes as OperationConsumesElement, Operation as OperationElement, OperationParameters as OperationParametersElement, OperationProduces as OperationProducesElement, OperationSchemes as OperationSchemesElement, OperationSecurity as OperationSecurityElement, OperationTags as OperationTagsElement, Parameter as ParameterElement, ParametersDefinitions as ParametersDefinitionsElement, PathItem as PathItemElement, PathItemParameters as PathItemParametersElement, Paths as PathsElement, PatternedFieldsJsonObjectVisitor as PatternedFieldsVisitor, Reference as ReferenceElement, Response as ResponseElement, ResponsesDefinitions as ResponsesDefinitionsElement, Responses as ResponsesElement, Schema as SchemaElement, Scopes as ScopesElement, SecurityDefinitions as SecurityDefinitionsElement, SecurityRequirement as SecurityRequirementElement, SecurityScheme as SecuritySchemeElement, SpecificationVisitor, SwaggerConsumes as SwaggerConsumesElement, Swagger as SwaggerElement, SwaggerProduces as SwaggerProducesElement, SwaggerSchemes as SwaggerSchemesElement, SwaggerSecurity as SwaggerSecurityElement, SwaggerTags as SwaggerTagsElement, SwaggerVersion as SwaggerVersionElement, Tag as TagElement, Visitor, Xml as XmlElement, createRefractor, openApi2 as default, getNodeType, isContactElement, isDefinitionsElement, isExampleElement, isExternalDocumentationElement, isHeaderElement, isHeadersElement, isInfoElement, isItemsElement, isLicenseElement, isOperationElement, isParameterElement, isParametersDefinitionsElement, isPathItemElement, isPathsElement, isReferenceElement, isReferenceLikeElement, isResponseElement, isResponsesDefinitionsElement, isResponsesElement, isSchemaElement, isScopesElement, isSecurityDefinitionsElement, isSecurityRequirementElement, isSecuritySchemeElement, isSwaggerElement, isSwaggerExtension, isSwaggerVersionElement, isTagElement, isXmlElement, keyMap, mediaTypes, refract, plugin as refractorPluginReplaceEmptyElement, specification as specificationObj };
