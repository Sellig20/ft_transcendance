import { mergeDeepRight, propOr } from 'ramda';
import { invokeArgs } from 'ramda-adjunct';
import createToolbox from "../../toolbox.mjs";
import { getNodeType, mergeAllVisitors, visit } from "../../../traversal/visitor.mjs";
const defaultDispatchPluginsOptions = {
  toolboxCreator: createToolbox,
  visitorOptions: {
    nodeTypeGetter: getNodeType,
    exposeEdits: true
  }
};

// eslint-disable-next-line import/prefer-default-export
export const dispatchPlugins = (element, plugins, options = {}) => {
  if (plugins.length === 0) return element;
  const mergedOptions = mergeDeepRight(defaultDispatchPluginsOptions, options);
  const {
    toolboxCreator,
    visitorOptions
  } = mergedOptions;
  const toolbox = toolboxCreator();
  const pluginsSpecs = plugins.map(plugin => plugin(toolbox));
  const mergedPluginsVisitor = mergeAllVisitors(pluginsSpecs.map(propOr({}, 'visitor')), {
    ...visitorOptions
  });
  pluginsSpecs.forEach(invokeArgs(['pre'], []));
  const newElement = visit(element, mergedPluginsVisitor, visitorOptions);
  pluginsSpecs.forEach(invokeArgs(['post'], []));
  return newElement;
};