import stampit from 'stampit';
import { visit } from "./visitor.mjs";
import EphemeralArray from "./ast/ephemeral-array.mjs";
import EphemeralObject from "./ast/ephemeral-object.mjs";
import { isElement, isBooleanElement, isNumberElement, isStringElement, isNullElement } from "../../../predicates/index.mjs";
/* eslint-disable @typescript-eslint/naming-convention */
const Visitor = stampit.init(function _Visitor() {
  const references = new WeakMap();
  this.BooleanElement = function _BooleanElement(element) {
    return element.toValue();
  };
  this.NumberElement = function _NumberElement(element) {
    return element.toValue();
  };
  this.StringElement = function _StringElement(element) {
    return element.toValue();
  };
  this.NullElement = function _NullElement() {
    return null;
  };
  this.ObjectElement = {
    enter(element) {
      if (references.has(element)) {
        return references.get(element).toReference();
      }
      const ephemeral = new EphemeralObject(element.content);
      references.set(element, ephemeral);
      return ephemeral;
    }
  };
  this.EphemeralObject = {
    leave(ephemeral) {
      return ephemeral.toObject();
    }
  };
  this.MemberElement = {
    enter(element) {
      return [element.key, element.value];
    }
  };
  this.ArrayElement = {
    enter(element) {
      if (references.has(element)) {
        return references.get(element).toReference();
      }
      const ephemeral = new EphemeralArray(element.content);
      references.set(element, ephemeral);
      return ephemeral;
    }
  };
  this.EphemeralArray = {
    leave(ephemeral) {
      return ephemeral.toArray();
    }
  };
});
/* eslint-enable */

const serializer = element => {
  if (!isElement(element)) return element;

  // shortcut optimization for certain element types
  if (isStringElement(element) || isNumberElement(element) || isBooleanElement(element) || isNullElement(element)) {
    return element.toValue();
  }
  return visit(element, Visitor());
};
export default serializer;