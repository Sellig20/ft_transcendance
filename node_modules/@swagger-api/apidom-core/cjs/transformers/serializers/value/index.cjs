"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
exports.__esModule = true;
exports.default = void 0;
var _stampit = _interopRequireDefault(require("stampit"));
var _visitor = require("./visitor.cjs");
var _ephemeralArray = _interopRequireDefault(require("./ast/ephemeral-array.cjs"));
var _ephemeralObject = _interopRequireDefault(require("./ast/ephemeral-object.cjs"));
var _index = require("../../../predicates/index.cjs");
/* eslint-disable @typescript-eslint/naming-convention */
const Visitor = _stampit.default.init(function _Visitor() {
  const references = new WeakMap();
  this.BooleanElement = function _BooleanElement(element) {
    return element.toValue();
  };
  this.NumberElement = function _NumberElement(element) {
    return element.toValue();
  };
  this.StringElement = function _StringElement(element) {
    return element.toValue();
  };
  this.NullElement = function _NullElement() {
    return null;
  };
  this.ObjectElement = {
    enter(element) {
      if (references.has(element)) {
        return references.get(element).toReference();
      }
      const ephemeral = new _ephemeralObject.default(element.content);
      references.set(element, ephemeral);
      return ephemeral;
    }
  };
  this.EphemeralObject = {
    leave(ephemeral) {
      return ephemeral.toObject();
    }
  };
  this.MemberElement = {
    enter(element) {
      return [element.key, element.value];
    }
  };
  this.ArrayElement = {
    enter(element) {
      if (references.has(element)) {
        return references.get(element).toReference();
      }
      const ephemeral = new _ephemeralArray.default(element.content);
      references.set(element, ephemeral);
      return ephemeral;
    }
  };
  this.EphemeralArray = {
    leave(ephemeral) {
      return ephemeral.toArray();
    }
  };
});
/* eslint-enable */

const serializer = element => {
  if (!(0, _index.isElement)(element)) return element;

  // shortcut optimization for certain element types
  if ((0, _index.isStringElement)(element) || (0, _index.isNumberElement)(element) || (0, _index.isBooleanElement)(element) || (0, _index.isNullElement)(element)) {
    return element.toValue();
  }
  return (0, _visitor.visit)(element, Visitor());
};
var _default = exports.default = serializer;