"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs3/helpers/interopRequireDefault").default;
exports.__esModule = true;
exports.keyMap = exports.default = void 0;
var _stampit = _interopRequireDefault(require("stampit"));
var _apidomAst = require("@swagger-api/apidom-ast");
var _TreeCursorSyntaxNode = _interopRequireDefault(require("../../TreeCursorSyntaxNode.cjs"));
const keyMap = exports.keyMap = {
  document: ['children'],
  object: ['children'],
  array: ['children'],
  string: ['children'],
  property: ['children'],
  key: ['children'],
  error: ['children']
};
const CstVisitor = (0, _stampit.default)({
  init() {
    /**
     * Private API.
     */

    const toPosition = node => {
      const start = (0, _apidomAst.Point)({
        row: node.startPosition.row,
        column: node.startPosition.column,
        char: node.startIndex
      });
      const end = (0, _apidomAst.Point)({
        row: node.endPosition.row,
        column: node.endPosition.column,
        char: node.endIndex
      });
      return (0, _apidomAst.Position)({
        start,
        end
      });
    };

    /**
     * Public API.
     */

    this.enter = function enter(node) {
      // anonymous literals from CST transformed into AST literal nodes
      if (node instanceof _TreeCursorSyntaxNode.default && !node.isNamed) {
        const position = toPosition(node);
        const value = node.type || node.text;
        const {
          isMissing
        } = node;
        return (0, _apidomAst.Literal)({
          value,
          position,
          isMissing
        });
      }
      return undefined;
    };
    this.document = {
      enter(node) {
        const position = toPosition(node);
        return (0, _apidomAst.JsonDocument)({
          children: node.children,
          position,
          isMissing: node.isMissing
        });
      },
      leave(document) {
        return (0, _apidomAst.ParseResult)({
          children: [document]
        });
      }
    };
    this.object = function object(node) {
      const position = toPosition(node);
      return (0, _apidomAst.JsonObject)({
        children: node.children,
        position,
        isMissing: node.isMissing
      });
    };
    this.pair = function pair(node) {
      const position = toPosition(node);
      const children = node.children.slice(1);
      const {
        keyNode
      } = node;
      const key = (0, _apidomAst.JsonKey)({
        children: (keyNode == null ? void 0 : keyNode.children) || [],
        position: keyNode != null ? toPosition(keyNode) : null,
        isMissing: keyNode != null ? keyNode.isMissing : false
      });
      return (0, _apidomAst.JsonProperty)({
        children: [key, ...children],
        position,
        isMissing: node.isMissing
      });
    };
    this.array = function array(node) {
      const position = toPosition(node);
      return (0, _apidomAst.JsonArray)({
        children: node.children,
        position,
        isMissing: node.isMissing
      });
    };
    this.string = function string(node) {
      const position = toPosition(node);
      const content = (0, _apidomAst.JsonStringContent)({
        value: JSON.parse(node.text)
      });
      return (0, _apidomAst.JsonString)({
        children: [content],
        position,
        isMissing: node.isMissing
      });
    };
    this.number = function number(node) {
      const position = toPosition(node);
      const value = node.text;
      return (0, _apidomAst.JsonNumber)({
        value,
        position,
        isMissing: node.isMissing
      });
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention
    this.null = function _null(node) {
      const position = toPosition(node);
      const value = node.text;
      return (0, _apidomAst.JsonNull)({
        value,
        position,
        isMissing: node.isMissing
      });
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention
    this.true = function _true(node) {
      const position = toPosition(node);
      const value = node.text;
      return (0, _apidomAst.JsonTrue)({
        value,
        position,
        isMissing: node.isMissing
      });
    };

    // eslint-disable-next-line @typescript-eslint/naming-convention
    this.false = function _false(node) {
      const position = toPosition(node);
      const value = node.text;
      return (0, _apidomAst.JsonFalse)({
        value,
        position,
        isMissing: node.isMissing
      });
    };
    this.ERROR = function ERROR(node, key, parent, path) {
      const position = toPosition(node);
      const errorNode = (0, _apidomAst.Error)({
        children: node.children,
        position,
        isUnexpected: !node.hasError,
        isMissing: node.isMissing,
        value: node.text
      });
      if (path.length === 0) {
        return (0, _apidomAst.ParseResult)({
          children: [errorNode]
        });
      }
      return errorNode;
    };
  }
});
var _default = exports.default = CstVisitor;